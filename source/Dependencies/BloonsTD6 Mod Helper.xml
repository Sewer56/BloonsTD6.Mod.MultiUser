<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BloonsTD6 Mod Helper</name>
    </assembly>
    <members>
        <member name="P:BTD_Mod_Helper.Api.Display.ICustomDisplay.AssetBundleName">
            <summary>
            The name of the asset bundle file that the model is in, not including the .bundle extension
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ICustomDisplay.PrefabName">
            <summary>
            The name of the prefab that the model has within the Asset Bundle
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ICustomDisplay.MaterialName">
            <summary>
            The name of the material that should be applied to the tower from the asset bundle
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModCustomDisplay">
            <summary>
            The custom version of a ModDisplay that loads in a model from a unity assetbundle
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModCustomDisplay.AssetBundleName">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModCustomDisplay.PrefabName">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModCustomDisplay.MaterialName">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModCustomDisplay.BaseDisplay">
            <summary>
            On a ModCustomDisplay, this property does nothing
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModCustomDisplay.ModifyDisplayNode(Assets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Performs alterations to the unity display node when it is created
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModDisplay">
            <summary>
            A custom Display that is a copy of an existing Display that can be modified
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.RegistrationPriority">
            <summary>
            ModDisplays register first
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.Register">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.BaseDisplay">
            <summary>
            The GUID of the display to copy this ModDisplay off of
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.ModifyDisplayNode(Assets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Alters the UnityDisplayNode that was copied from the one used by <see cref="P:BTD_Mod_Helper.Api.Display.ModDisplay.BaseDisplay"/>
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.SetMeshTexture(Assets.Scripts.Unity.Display.UnityDisplayNode,System.String)">
            <summary>
            Sets the mesh texture to that of a named png
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="textureName">The name of the texture, without .png</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.SetMeshTexture(Assets.Scripts.Unity.Display.UnityDisplayNode,System.String,System.Int32)">
            <summary>
            Sets the mesh texture to that of a named png
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="textureName">The name of the texture, without .png</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.Set2DTexture(Assets.Scripts.Unity.Display.UnityDisplayNode,System.String)">
            <summary>
            Sets the sprite texture to that of a named png
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="textureName">The name of the texture, without .png</param>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.PositionOffset">
            <summary>
            The position offset to render the display at (z axis is up toward camera)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.Scale">
            <summary>
            The scale to render the display at
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.PixelsPerUnit">
            <summary>
            How many pixels in a sprite texture should be equal to one unit
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.GetDisplayModel">
            <summary>
            Gets a new DisplayModel based on this ModDisplay
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.Apply(Assets.Scripts.Models.GenericBehaviors.DisplayModel)">
            <summary>
            Applies this ModDisplay to a given DisplayModel
            </summary>
            <param name="displayModel"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.Apply(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Applies this ModDisplay to a given TowerModel
            </summary>
            <param name="towerModel"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.Apply(Assets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            Applies this ModDisplay to a given ProjectileModel
            </summary>
            <param name="projectileModel"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.GetDisplay(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the Display for a given tower, optionally for the given tiers
            </summary>
            <param name="tower">The tower base id</param>
            <param name="top">Path 1 tier</param>
            <param name="mid">Path 2 tier</param>
            <param name="bot">Path 3 tier</param>
            <returns>The display GUID</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModDisplay.UseNode(System.String,System.Action{Assets.Scripts.Unity.Display.UnityDisplayNode})">
            <summary>
            Gets a UnityDisplayNode for a different guid
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModDisplay.ModifiesUnityObject">
            <summary>
            If you modify the unity Object and not just the DisplayNode attached to it, then set this to true
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Display.ModDisplay.Generic2dDisplay">
            <summary>
            The display id for RoadSpikes
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay">
            <summary>
            A ModCustomDisplay that will automatically apply to a ModTower for specific tiers
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay.AssetBundleName">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay.PrefabName">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay.MaterialName">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay.BaseDisplay">
            <summary>
            On a ModCustomDisplay, this property does nothing
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay.ModifyDisplayNode(Assets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Performs alterations to the unity display node when it is created
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay`1">
            <summary>
            A convenient generic class for applying a ModTowerCustomDisplay to a ModTower
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerCustomDisplay`1.Tower">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModTowerDisplay">
            <summary>
            A ModDisplay that will automatically apply to a ModTower for specific tiers
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerDisplay.Tower">
            <summary>
            The ModTower that this ModDisplay is used for
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModTowerDisplay.UseForTower(System.Int32[])">
            <summary>
            Returns true if this display should be used by its Tower for the given tiers
            </summary>
            <param name="tiers">The potential tiers of the tower</param>
            <returns>If the Tower should have this display</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModTowerDisplay.ApplyToTower(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Applies this ModTowerDisplay to the towerModel. Override to change how this applies, i.e. making it
            apply to an AttackModel instead
            </summary>
            <param name="towerModel"></param>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerDisplay.ParagonDisplayIndex">
            <summary>
            A number between 0 and 4 (inclusive) representing which set of paragon degrees this display applies to
            <br/>
            0: Degree 1 - 20
            <br/>
            1: Degree 21 - 40
            <br/>
            2: Degree 41 - 60
            <br/>
            3: Degree 61 - 80
            <br/>
            4: Degree 81 - 100
            <br/>
            If you don't have one for every index, then the next highest one will be used
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModTowerDisplay.ModifyDisplayNode(Assets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Alters the UnityDisplayNode that was copied from the one used by <see cref="P:BTD_Mod_Helper.Api.Display.ModDisplay.BaseDisplay"/>
            <br/>
            By default, this will change the main texture of the first SkinnedMeshRenderer of the node to that of a
            png with the same name as the class
            </summary>
            <param name="node">The UnityDisplayNode</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Display.ModTowerDisplay.IsParagon(System.Int32[])">
            <summary>
            If the tower tiers make it count as a Paragon
            </summary>
            <param name="tiers"></param>
            <returns></returns>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Display.ModTowerDisplay.TotalParagonDisplays">
            <summary>
            Number of different Paragon displays that are used by default
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Display.ModTowerDisplay`1">
            <summary>
            A convenient generic class for applying a ModTowerDisplay to a ModTower
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Display.ModTowerDisplay`1.Tower">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Enums.ScheduleType">
            <summary>
            Controls how you want to wait the Task Scheduler to wait for your tasks
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModContent">
            <summary>
            ModContent serves two major purposes:
                <br/>
                1. It is a base class for things that needs to be loaded via reflection from mods and given Ids,
                such as ModTower and ModUpgrade
                <br/>
                2. It is a utility class with methods to access instances of those classes and other resources
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModContent.Name">
            <summary>
            The name that will be at the end of the ID for this ModContent, by default the class name
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModContent.Id">
            <summary>
            The id that this ModContent will be given; a combination of the Mod's prefix and the name
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModContent.ID">
            <summary>
            Backing property for ID that's only able to be overrided internally
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModContent.mod">
            <summary>
            The BloonsMod that this content was added by
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.Load">
            <summary>
            Used for when you want to programmatically create multiple instances of a given ModContent
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.Register">
            <summary>
            Registers this ModContent into the game
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModContent.RegistrationPriority">
            <summary>
            Used to allow some ModContent to Register before or after others
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.PostRegister">
            <summary>
            Making things happen after the initial Registration phase of all ModContent
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.Create(System.Type,BTD_Mod_Helper.BloonsMod)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="mod"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSpriteReference``1(System.String)">
            <summary>
            Gets a sprite reference by name for a specific mod
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <typeparam name="T">Your mod's main BloonsMod extending class</typeparam>
            <returns>A new SpriteReference</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSpriteReference(System.String)">
            <summary>
            Gets a sprite reference by name for this mod
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <returns>A new SpriteReference</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSpriteReference(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Gets a sprite reference by name for a specific mod
            </summary>
            <param name="mod">The BloonsMod that the texture is from</param>
            <param name="name">The file name of your texture, without the extension</param>
            <returns>A new SpriteReference, or null if there's no resource</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.CreateSpriteReference(System.String)">
            <summary>
            (Cross-Game compatible) Returns a new SpriteReference that uses the given guid
            </summary>
            <param name="guid">The guid that you'd like to assign to the SpriteReference</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTextureGUID(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Gets a texture's GUID by name for a specific mod
            <br/>
            Returns null if a Texture hasn't been loaded with that name
            </summary>
            <param name="mod">The BloonsMod that the texture is from</param>
            <param name="fileName">The file name of your texture, without the extension</param>
            <returns>The texture's GUID</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTextureGUID``1(System.String)">
            <summary>
            Gets a texture's GUID by name for a specific mod
            <br/>
            Returns null if a Texture hasn't been loaded with that name
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <typeparam name="T">Your mod's main BloonsMod extending class</typeparam>
            <returns>The texture's GUID</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTextureGUID(System.String)">
            <summary>
            Gets a texture's GUID by name for this mod
            <br/>
            Returns null if a Texture hasn't been loaded with that name
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <returns>The texture's GUID</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTexture(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Constructs a Texture2D for a given texture name within a mod
            </summary>
            <param name="bloonsMod">The mod that adds this texture</param>
            <param name="fileName">The file name of your texture, without the extension</param>
            <returns>A Texture2D</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTexture(System.String)">
            <summary>
            Constructs a Texture2D for a given texture name within this mod
            </summary>
            <param name="fileName">The file name of your texture, without the extension</param>
            <returns>A Texture2D</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTexture``1(System.String)">
            <summary>
            Constructs a Texture2D for a given texture name within a mod
            </summary>
            <param name="fileName">The file name of your texture, without the extension</param>
            <returns>A Texture2D</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSprite(BTD_Mod_Helper.BloonsMod,System.String,System.Single)">
            <summary>
            Constructs a Sprite for a given texture name within a given mod
            </summary>
            <param name="mod"></param>
            <param name="name">The file name of your texture, without the extension</param>
            <param name="pixelsPerUnit">The pixels per unit for the Sprite to have</param>
            <returns>A Sprite</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSprite(System.String,System.Single)">
            <summary>
            Constructs a Sprite for a given texture name within this mod
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <param name="pixelsPerUnit">The pixels per unit for the Sprite to have</param>
            <returns>A Sprite</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetSprite``1(System.String,System.Single)">
            <summary>
            Constructs a Sprite for a given texture name within a given mod
            </summary>
            <param name="name">The file name of your texture, without the extension</param>
            <param name="pixelsPerUnit">The pixels per unit for the Sprite to have</param>
            <returns>A Sprite</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetDisplayGUID``1">
            <summary>
            Gets the GUID (thing that should be used in the display field for things) for a specific ModDisplay
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.TowerID``1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the internal tower name/id for a ModTower
            </summary>
            <param name="top">The top path tier</param>
            <param name="mid">The middle path tier</param>
            <param name="bot">The bottom path tier</param>
            <typeparam name="T">The ModTower type</typeparam>
            <returns>The tower name/id</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetTowerModel``1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the TowerModel for a ModTower at a specific tier level
            </summary>
            <param name="top">The top path tier</param>
            <param name="mid">The middle path tier</param>
            <param name="bot">The bottom path tier</param>
            <typeparam name="T">The ModTower type</typeparam>
            <returns>The tower name/id</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.UpgradeID``1">
            <summary>
            Gets the internal upgrade name/id for a ModUpgrade
            </summary>
            <typeparam name="T">The ModUpgrade type</typeparam>
            <returns>The upgrade name/id</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.TowerSet``1">
            <summary>
            Gets the internal tower set id for a given TowerSet
            </summary>
            <typeparam name="T">The ModUpgrade type</typeparam>
            <returns>The upgrade name/id</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetInstances``1">
            <summary>
            Gets all loaded ModContent objects that are of type T 
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetContent``1">
            <summary>
            Gets all loaded ModContent objects that are T or a subclass of T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetInstance``1">
            <summary>
            Gets the singleton instance of a particular ModContent or BloonsMod based on its type
            </summary>
            <typeparam name="T">The type to get the instance of</typeparam>
            <returns>The official instance of it</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetInstance(System.Type)">
            <summary>
            Gets the official instance of a particular ModLoadable or BloonsMod based on its type
            </summary>
            <param name="type">The type to get the instance of</param>
            <returns>The official instance of it</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetBundle(BTD_Mod_Helper.BloonsMod,System.String)">
            <summary>
            Gets a bundle from a mod with the specified name (no file extension)
            </summary>
            <param name="mod"></param>
            <param name="name"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetBundle``1(System.String)">
            <summary>
            Gets a bundle from the mod T with the specified name (no file extension)
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetBundle(System.String)">
            <summary>
            Gets a bundle from your mod with the specified name (no file extension)
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModContent.GetMod(System.String)">
            <summary>
            Gets a BloonsMod by its name, or returns null if none are loaded with that name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.MoreAccessTools">
            <summary>
            Further methods along the lines of Harmony's <see cref="T:HarmonyLib.AccessTools"/>
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.MoreAccessTools.SafeGetNestedClassMethod(System.Type,System.String,System.String,System.Int32)">
            <summary>
            Safely gets the MethodInfo for a method within a nested class. This is recommended to use because over
            directly targeting it with typeof and nameof because the nested class names can change randomly.
            </summary>
            <param name="outerType">The outer type whose name won't change</param>
            <param name="nestedTypeName">The name of nested type, not including the _s</param>
            <param name="methodName">The desired method name within the nested type</param>
            <param name="index">If multiple nested classes share a name portion, use the one at this index, default 0</param>
            <returns>The MethodInfo, or null alongside a console warning if one couldn't be found</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.MoreAccessTools.TryGetNestedClassMethod(System.Type,System.String,System.String,System.Reflection.MethodInfo@,System.Int32)">
            <inheritdoc cref="M:BTD_Mod_Helper.Api.MoreAccessTools.SafeGetNestedClassMethod(System.Type,System.String,System.String,System.Int32)"/>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModHero">
            <summary>
            
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.DontAddToShop">
            <summary>
            Heroes aren't in the default shop
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.ParagonMode">
            <summary>
            No paragon heroes
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.Order">
            <summary>
            No Order among different custom heroes
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.BaseTower">
            <summary>
            The default hero (or tower) to base your hero off of
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.TowerSet">
            <summary>
            Heroes can only be in the Hero tower set
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.TopPathUpgrades">
            <summary>
            Putting all the hero level upgrades in the top path
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.MiddlePathUpgrades">
            <summary>
            No other upgrade paths used
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.BottomPathUpgrades">
            <summary>
            No other upgrade paths used
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModHero.TowerTiers">
            <summary>
            Heroes tower tiers are always Level-0-0
            </summary>
            <returns></returns>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.NameStyle">
            <summary>
            The other hero that has the same colored name in the Heroes menu as you want to use
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.GlowStyle">
            <summary>
            The other hero that has the same glow color in the Heroes menu as you want to use
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.BackgroundStyle">
            <summary>
            The other hero that has the same background color in the Heroes menu as you want to use
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.Square">
            <summary>
            The name of the png to try to find for the new hero select screen button
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.MaxLevel">
            <summary>
            The total number of levels this hero has. Do not set this to anything other than number of ModHeroLevels
            that you've actually created for your Hero.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.XpRatio">
            <summary>
            XpRatio to use when determining the default xp costs of the levels.
            <br/>
            All four base heroes (Quincy, Gwendolin, Striker Jones, Obyn Greenfoot) as well as Etienne have an XP ratio of 1x.
            <br/>
            Ezili, Pat Fusty, Admiral Brickell, and Sauda have a 1.425x XP ratio.
            <br/>
            Benjamin and Psi have an XP ratio of 1.5x.
            <br/>
            Captain Churchill and Adora have a ratio of 1.71x.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.Title">
            <summary>
            The short description that appears under the name of the hero
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.Level1Description">
            <summary>
            The description to use for the first level of your hero
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHero.Abilities">
            <summary>
            The total number of abilities that this hero has as max level
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModHero.GetHeroIndex(System.Collections.Generic.List{Assets.Scripts.Models.TowerSets.HeroDetailsModel})">
            <summary>
            The index to add this hero at in relation to other heroes
            </summary>
            <param name="heroSet"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModHeroLevel">
            <summary>
            Class representing a 
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Name">
            <summary>
            Internal naming scheme for hero levels
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.NeedsConfirmation">
            <summary>
            No confirmation on hero upgrades
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.ConfirmationTitle">
            <summary>
            No confirmation on hero upgrades
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.ConfirmationBody">
            <summary>
            No confirmation on hero upgrades
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Icon">
            <summary>
            Hero upgrades don't have individual icons
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.IconReference">
            <summary>
            Hero upgrades don't have individual icons
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Tier">
            <summary>
            The upgrade's tier is the hero's level.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Cost">
            <summary>
            Hero upgrades have no cost
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.XpCost">
            <summary>
            How much XP the hero needs to get to go from the previous level to this level.
            <br/>
            Default is calculated the same way Ninja Kiwi does it using 
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Tower">
            <summary>
            The ModTower is the ModHero
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Path">
            <summary>
            All hero upgrades count as top path
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Level">
            <summary>
            What level this 
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.Hero">
            <summary>
            The tower that this is an upgrade for
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.AbilityName">
            <summary>
            DisplayName field of the AbilityModel added at this level, if any
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel.AbilityDescription">
            <summary>
            Description of the ability added at this level, if any
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModHeroLevel`1">
            <summary>
            Convenient generic class for specifying the ModHero that this ModHeroLevel is for
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModHeroLevel`1.Hero">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModVanillaContent">
            <summary>
            ModContent Class for modifying a certain set of vanilla towers
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaContent.AffectBaseGameModel">
            <summary>
            Whether this should only modify the Towers In-Game, or also affect the default GameModel outside a game
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaContent.Cost">
            <summary>
            Changes the base cost
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaContent.Name">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaContent.DisplayName">
            <summary>
            Change the name of it
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaContent.Description">
            <summary>
            Change the description of it
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaContent.Apply(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Applies the modifications to the TowerModel
            </summary>
            <param name="towerModel"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaContent.Register">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModVanillaParagon">
            <summary>
            Dummy ModTower that can be used to make a Paragon for a base tower.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.DontAddToShop">
            <summary>
            No paragons in shop
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.ParagonMode">
            <summary>
            Not using the custom tower paragon mode
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.Order">
            <summary>
            Order doesn't apply here
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.TowerSet">
            <summary>
            Same towerSet as base tower
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.Cost">
            <summary>
            Handled by upgrade cost
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.TopPathUpgrades">
            <summary>
            No upgrades for the paragon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.MiddlePathUpgrades">
            <summary>
            No upgrades for the paragon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.BottomPathUpgrades">
            <summary>
            No upgrades for the paragon
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.ModifyBaseTowerModel(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Tower gets modified in the Paragon upgrade
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.TowerTiers">
            <summary>
            Doesn't generate any of the tower on its own
            </summary>
            <returns></returns>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.Portrait">
            <summary>
            Controlled by the ModParagonUpgrade
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.Icon">
            <summary>
            Controlled by the ModParagonUpgrade
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.IconReference">
            <summary>
            Controlled by the ModParagonUpgrade
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.PortraitReference">
            <summary>
            Controlled by the ModParagonUpgrade
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.Description">
            <summary>
            Controlled by the ModParagonUpgrade
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.GetTowerIndex(System.Collections.Generic.List{Assets.Scripts.Models.TowerSets.TowerDetailsModel})">
            <summary>
            Tower index doesn't apply
            </summary>
            <param name="towerSet"></param>
            <returns></returns>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaParagon.Name">
            <summary>
            Name override
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade">
            <summary>
            Defines the Paragon Upgrade for a ModTower. Remember to set the <see cref="P:BTD_Mod_Helper.Api.Towers.ModTower.ParagonMode"/> property.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.Name">
            <summary>
            Specifically use the paragon upgrade naming scheme. No overriding because that apparently causes issues.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.ID">
            <summary>
            Override the ID to not have the prefix. It's necessary to work, and there's not a good way for
            different paragon mods to coexist anyway
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.Path">
            <summary>
            No changing of ModParagonUpgrade path
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.Tier">
            <summary>
            No changing of ModParagonUpgrade tier
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.Load">
            <summary>
            No loading of multiple ModParagonUpgrades
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.ParagonTowerModel">
            <summary>
            The ParagonTowerModel that this will use as a base. You don't need to worry about displayDegreePaths
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.RemoveAbilities">
            <summary>
            By default, remove any abilities from the Paragon tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.ModifyPowerDegreeMutator(Assets.Scripts.Models.Towers.Behaviors.ParagonTowerModel.PowerDegreeMutator,System.Single,System.Int32)">
            <summary>
            Modify the PowerDegreeMutator of the Paragon
            </summary>
            <param name="powerDegreeMutator"></param>
            <param name="investment"></param>
            <param name="degree"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.OnDegreeSet(Assets.Scripts.Simulation.Towers.Tower,System.Int32)">
            <summary>
            Method to modify the Simulation Tower once its Degree has been set
            </summary>
            <param name="tower"></param>
            <param name="degree"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade.GetUpgradeModel">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade`1">
            <summary>
            A convenient generic class for specifying the ModTower that this ModParagonUpgrade is for
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModParagonUpgrade`1.Tower">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModTower">
            <summary>
            Class representing a custom Tower being added by a mod
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.Register">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.RegistrationPriority">
            <summary>
            ModTowers register third
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.DisplayName">
            <summary>
            The name that will be actually displayed for the tower in game
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.DisplayNamePlural">
            <summary>
            The name that will actually be display when referring to multiple of the tower
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.Portrait">
            <summary>
            The Portrait for the 0-0-0 tower
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.Icon">
            <summary>
            The Icon for the Tower's purchase button
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.IconReference">
            <summary>
            If you're not going to use a custom .png for your Icon, use this to directly control its SpriteReference
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.PortraitReference">
            <summary>
            If you're not going to use a custom .png for your Portrait, use this to directly control its SpriteReference
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.Use2DModel">
            <summary>
            Whether this Tower should display 2-dimensionally, and search for png images
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.PixelsPerUnit">
            <summary>
            For 2D towers, the ratio between pixels and display units. Higher number -> smaller tower.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.DontAddToShop">
            <summary>
            Makes this Tower not actually add itself to the shop, useful for making subtowers
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.ParagonMode">
            <summary>
            Defines whether / how this ModTower has a Paragon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.Order">
            <summary>
            Customized order in which to add this ModTower in the shop in relation to others added by your mod
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ModTower.PRIMARY">
            <summary>
            The string to use for the Primary tower set
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ModTower.MAGIC">
            <summary>
            The string to use for the Magic tower set
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ModTower.MILITARY">
            <summary>
            The string to use for the Military tower set
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ModTower.SUPPORT">
            <summary>
            The string to use for the Support tower set
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.TowerSet">
            <summary>
            The family of Monkeys that your Tower should be put in.
            <br/>
            For now, just use one of the default constants provided of PRIMARY, MILITARY, MAGIC, or SUPPORT.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.BaseTower">
            <summary>
            The id of the default BTD Tower that your Tower is going to be copied from by default.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.Cost">
            <summary>
            The in game cost of this tower (on Medium difficulty)
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.TopPathUpgrades">
            <summary>
            The number of upgrades the tower has in it's 1st / top path
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.MiddlePathUpgrades">
            <summary>
            The number of upgrades the tower has in it's 2nd / middle path
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.BottomPathUpgrades">
            <summary>
            The number of upgrades the tower has in it's 3rd / bottom path
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower.Description">
            <summary>
            The in game description of the Tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.#ctor">
            <summary>
            Constructor for ModTower, used implicitly by ModContent.Create
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.ModifyBaseTowerModel(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Implemented by a ModTower to modify the base tower model before applying any/all ModUpgrades
            <br/>
            Things like the TowerModel's name, cost, tier, and upgrades are already taken care of before this point
            </summary>
            <param name="towerModel">The Base Tower Model</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.GetDefaultTowerModel">
            <summary>
            Gets the base 0-0-0 TowerModel for this Tower
            <br/>
            Starts with the <see cref="P:BTD_Mod_Helper.Api.Towers.ModTower.BaseTower"/>, modifies its default properties as needed,
            then calls <see cref="M:BTD_Mod_Helper.Api.Towers.ModTower.ModifyBaseTowerModel(Assets.Scripts.Models.Towers.TowerModel)"/> on it.
            
            </summary>
            <returns>The 0-0-0 TowerModel for this Tower</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.TowerTiers">
            <summary>
            Returns all the valid tiers for the TowerModels of this Tower
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.Get2DTexture(System.Int32[])">
            <summary>
            If this is a 2D tower, gets the name of the .png to use for a given set of tiers
            <br/>
            Default Behavior Example: For CardMonkey with tiers 2-3-0, it would try (in order):
            CardMonkey-230, CardMonkey-X3X, CardMonkey-2XX, CardMonkey
            </summary>
            <param name="tiers"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTower.GetTowerIndex(System.Collections.Generic.List{Assets.Scripts.Models.TowerSets.TowerDetailsModel})">
            <summary>
            When adding this tower to the shop, gets the index at which to add the tower relative to the existing ones.
            <br/>
            By default, the tower will be put at the end of the TowerSet category that it's in.
            </summary>
            <param name="towerSet"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModTower`1">
            <summary>
            A convenient generic class for specifying the ModTowerSet that a ModTower uses
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTower`1.TowerSet">
            <summary>
            The custom tower set that this ModTower uses
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ParagonMode">
            <summary>
            Defines the Paragon behavior for a ModTower
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ParagonMode.None">
            <summary>
            Don't generate a Paragon
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ParagonMode.Base000">
            <summary>
            Generate a Paragon by applying the ModParagonUpgrade to the 000 version of the tower
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ParagonMode.Base555">
            <summary>
            Generate a Paragon by applying the ModParagonUpgrade to the 555 version of the tower
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModTowerSet">
            <summary>
            A custom collection of ModTowers
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.RegistrationPriority">
            <summary>
            ModTowerSets register fourth
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTowerSet.Register">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.Container">
            <summary>
            Name of .png file for the background for towers in the Monkeys menu and the in game shop
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.ContainerReference">
            <summary>
            SpriteReference for the container
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.ContainerLarge">
            <summary>
            Name of .png file for the background used for non-paragon upgrades in the Upgrade screen
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.ContainerLargeReference">
            <summary>
            SpriteReference for the large container
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.Button">
            <summary>
            Name of .png file for the group button used in the Monkeys menu
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.ButtonReference">
            <summary>
            SpriteReference for the button
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.Portrait">
            <summary>
            Name of .png file for the background for in game portraits
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.PortraitReference">
            <summary>
            SpriteReference for the portrait
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.DisplayName">
            <summary>
            The name that will be actually displayed for the Tower Set in game
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTowerSet.GetTowerSetIndex(System.Collections.Generic.List{System.String})">
            <summary>
            Where to place this ModTowerSet in relation to other towerSets. By default at the end.
            <br/>
            </summary>
            <param name="towerSets">The current towerSets that already exist</param>
            <returns></returns>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModTowerSet.AllowInRestrictedModes">
            <summary>
            Whether this Tower Set should still be allowed to appear in Primary Only, Military Only, Magic Only
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTowerSet.GetTowerStartIndex(System.Collections.Generic.List{Assets.Scripts.Models.TowerSets.TowerDetailsModel})">
            <summary>
            The position to start placing ModTowers of this ModTowerSet in relation to other towers
            <br/>
            By default, will determine the position based on GetTowerSetIndex
            <br/>
            </summary>
            <param name="towerSet">The set of all current tower details</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModTowerSet.Load">
            <summary>
            No loading multiple instances of a ModTowerSet
            </summary>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModUpgrade">
            <summary>
            A class used to create an Upgrade for a Tower
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.RegistrationPriority">
            <summary>
            ModUpgrades register second
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModUpgrade.Register">
            <inheritdoc />
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ModUpgrade.TOP">
            <summary>
            Path ID for the Top path
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ModUpgrade.MIDDLE">
            <summary>
            Path ID for the Middle path
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.Towers.ModUpgrade.BOTTOM">
            <summary>
            Path ID for the Bottom path
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.DisplayName">
            <summary>
            The actual name that should be displayed for the tower
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Portrait">
            <summary>
            The file name without extension for the Portrait for this upgrade
            <br/>
            By default is the same file name as the tower followed by -Portrait
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Icon">
            <summary>
            The file name without extension for the Icon for this upgrade
            <br/>
            The Tower follows the default Bloons method of picking a Portrait: choose the highest tier upgrade, and if
            there's a tie, choose Mid > Top > Bot (for whatever reason)
            <br/>
            By default is the same file name as the tower followed by -Icon
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.IconReference">
            <summary>
            If you're not going to use a custom .png for your Icon, use this to directly control its SpriteReference
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.PortraitReference">
            <summary>
            If you're not going to use a custom .png for your Portrait, use this to directly control its SpriteReference
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Priority">
            <summary>
            Custom priority to make this upgrade applied sooner (increased priority) or later (decreased priority)
            when the TowerModel is being constructed
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.NeedsConfirmation">
            <summary>
            Whether this upgrade requires a confirmation popup
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.ConfirmationTitle">
            <summary>
            The title for the confirmation popup, if needed
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.ConfirmationBody">
            <summary>
            The body text for the confirmation popup, if needed
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.XpCost">
            <summary>
            Xp Cost for the upgrade. Meaningless usually because custom heroes automatically are automatically unlocked.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Path">
            <summary>
            The upgrade path
            Use <see cref="F:BTD_Mod_Helper.Api.Towers.ModUpgrade.TOP"/>, <see cref="F:BTD_Mod_Helper.Api.Towers.ModUpgrade.MIDDLE"/>, <see cref="F:BTD_Mod_Helper.Api.Towers.ModUpgrade.BOTTOM"/>
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Tier">
            <summary>
            The upgrade tier, 1 for Tier 1 Upgrades, 2 for Tier 2, etc...
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Cost">
            <summary>
            How much the upgrade costs on Medium difficulty
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Tower">
            <summary>
            The tower that this is an upgrade for
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Description">
            <summary>
            The description of this upgrade
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModUpgrade.ApplyUpgrade(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Apply the effects that this upgrade has onto a TowerModel
            <br/>
            The TowerModel's tier(s), applied upgrades and other info will already be correct, so this is mostly about
            changing the TowerModel's behavior
            <br/>
            The default ordering of upgrade application is to do them in ascending order of tier, doing Top then Mid
            then Bot at each tier. This can be changed using <see cref="P:BTD_Mod_Helper.Api.Towers.ModUpgrade.Priority"/>.
            </summary>
            <param name="towerModel"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModUpgrade.GetUpgradeModel">
            <summary>
            If you really need to override the way that the ModUpgrade makes its UpgradeModel, go ahead
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModUpgrade.RestrictUpgrading(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Allows you to dynamically allow an upgrade to not be purchasable based on the InGame values of a Tower
            </summary>
            <param name="tower"></param>
            <returns>If </returns>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModUpgrade`1">
            <summary>
            A convenient generic class for specifying the ModTower that this ModUpgrade is for
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModUpgrade`1.Tower">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModVanillaTower">
            <summary>
            ModContent class for modifying all TowerModels for a given Tower
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaTower.TowerId">
            <summary>
            The base id of the Tower that this should modify all TowerModels of
            <br/>
            Use TowerType.[tower]
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaTower.DisplayNamePlural">
            <summary>
            Change the name of it when it's plural
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaTower.TowerSet">
            <summary>
            Change the TowerSet that this tower is part of. Also handles moving its place within the shop.
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModVanillaTower`1">
            <summary>
            Helper class for changing a vanilla tower to be part of a modded tower set
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaTower`1.TowerSet">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.Towers.ModVanillaUpgrade">
            <summary>
            ModContent class for modifying all TowerModels that have a given upgrade applied to them
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.Towers.ModVanillaUpgrade.UpgradeId">
            <summary>
            The id of the Upgrade that this should modify all TowerModels that use
            <br/>
            Use UpgradeType.[upgrade]
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.Towers.ModVanillaUpgrade.Apply(Assets.Scripts.Models.Towers.Upgrades.UpgradeModel)">
            <summary>
            Change the UpgradeModel for this upgrade
            </summary>
            <param name="upgradeModel"></param>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.ButtonOption.Button">
            <summary>
            The actual Button for this option
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.ButtonOption.ButtonText">
            <summary>
            The Text for the Button
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.CheckboxOption.Checkbox">
            <summary>
            The actual CheckBox associated with this option
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.CheckboxOption.CheckboxText">
            <summary>
            The Text for the Checkbox
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.InputOption.Button">
            <summary>
            The Reset button. Can be used for other things if desired
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.InputOption.ButtonText">
            <summary>
            The Text for the Reset button
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.InputOption.InputField">
            <summary>
            The input field where the user types
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSetting`1">
            <summary>
            (Cross-Game compatible) Class for keeping track of a variable for a Mod that can be changed in game via the Mod Setings menu
            </summary>
            <typeparam name="T">The type that this ModSetting holds</typeparam>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.displayName">
            <summary>
            The display name for the mod setting.
            <br/>
            Needs to be public to allow for object initializing
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.OnValueChanged">
            <summary>
            Actions to call when the value changes. NOTE: Only works when using SetValue to change the value
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.OnInitialized">
            <summary>
            Actions to call when this OptionUI element is initialized
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.#ctor(`0)">
            <summary>
            Constructs a new ModSetting for the given value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.GetValue">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.GetDefaultValue">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.SetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.GetName">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.SetName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting`1.ConstructModOption(UnityEngine.GameObject)">
            <inheritdoc />
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSetting">
            <summary>
            
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting.GetValue">
            <summary>
            Gets the current value that this ModSetting holds
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting.GetDefaultValue">
            <summary>
            Gets the default value for this ModSetting
            </summary>
            <returns>The default value</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting.SetValue(System.Object)">
            <summary>
            Sets the current value of this ModSetting
            </summary>
            <param name="val">The new value</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting.GetName">
            <summary>
            Gets the Display name for this ModSetting
            </summary>
            <returns>The display name</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting.SetName(System.String)">
            <summary>
            Sets the Display name for this ModSetting
            </summary>
            <param name="name">The display name</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSetting.ConstructModOption(UnityEngine.GameObject)">
            <summary>
            Constructs a visual ModOption for this ModSetting
            </summary>
            <param name="parent">The parent GameObject to attach to</param>
            <returns>The constructed ModOption</returns>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.ModSettingBool.IsButton">
            <summary>
            Should the UI for this be a button? If not it will be a Checkbox
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Api.ModOptions.ModSettingString">
            <summary>
            
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingString.None">
            <summary>
            Allow all characters
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingString.Alphanumeric">
            <summary>
            Allow only alphanumeric characters
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingString.Decimal">
            <summary>
            Allow only valid decimals
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Api.ModOptions.ModSettingString.Integer">
            <summary>
            Allow only valid integers
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingString.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BTD_Mod_Helper.Api.ModOptions.ModSettingString.ConstructModOption(UnityEngine.GameObject)">
            <inheritdoc />
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.SliderOption.Slider">
            <summary>
            The actual slider for this option
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.SliderOption.Fill">
            <summary>
            The image to show for parts of the slider that are filled/have value
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.SliderOption.Handle">
            <summary>
            The image to show for the slider handle, if you want it to be visible
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.SliderOption.InputField">
            <summary>
            The input field where the user types
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.SliderOption.Button">
            <summary>
            The Reset button. Can be used for other things if desired
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Api.ModOptions.SliderOption.ButtonText">
            <summary>
            The text for the Reset Button
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Api.JsonSerializer.LoadFromFile``1(System.String)">
            <summary>
            Create an instance of a class from file
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="filePath">Location of the file</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.JsonSerializer.SaveToFile``1(``0,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Save an instance of a class to file
            </summary>
            <typeparam name="T">Type of class to save</typeparam>
            <param name="jsonObject">Object to save. Must be of Type T</param>
            <param name="savePath">Location to save file to</param>
            <param name="overwriteExisting">Overwrite the file if it already exists</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.TaskScheduler.ScheduleTask(System.Collections.IEnumerator)">
            <summary>
            (Cross-Game compatible) Schedule a task to execute right now as a Coroutine
            </summary>
            <param name="iEnumerator"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.TaskScheduler.ScheduleTask(System.Action,System.Func{System.Boolean})">
            <summary>
            (Cross-Game compatible) Schedule a task to execute later on as a Coroutine. By default will wait until the end of this current frame
            </summary>
            <param name="action">The action you want to execute once it's time to run your task</param>
            <param name="waitCondition">Wait for this to be true before executing task</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.TaskScheduler.ScheduleTask(System.Action,BTD_Mod_Helper.Api.Enums.ScheduleType,System.Int32,System.Func{System.Boolean})">
            <summary>
            (Cross-Game compatible) Schedule a task to execute later on as a Coroutine
            </summary>
            <param name="action">The action you want to execute once it's time to run your task</param>
            <param name="scheduleType">How you want to wait for your task</param>
            <param name="amountToWait">The amount you want to wait</param>
            /// <param name="waitCondition">Wait for this to be true before executing task</param>
        </member>
        <member name="M:BTD_Mod_Helper.Api.TaskScheduler.Coroutine(System.Action,BTD_Mod_Helper.Api.Enums.ScheduleType,System.Int32,System.Func{System.Boolean})">
            <summary>
            Will wait for amountToWait before executing your Action. If a waitCondition is specified it will continue waiting amountToWait until waitCondition is true
            </summary>
            <param name="action"></param>
            <param name="scheduleType"></param>
            <param name="amountToWait"></param>
            <param name="waitContition"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Api.TaskScheduler.WaiterCoroutine(BTD_Mod_Helper.Api.Enums.ScheduleType,System.Int32)">
            <summary>
            This coroutine will wait for amountToWait before finishing
            </summary>
            <param name="scheduleType"></param>
            <param name="amountToWait"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.AutoSave">
            <summary>
            Implements the features of the AutoSave mod
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.BloonsTD6Mod">
            <summary>
            Extend this Class instead of MelonMod to gain access to dozens of easy to use built-in hooks
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.AddTowerToGame(Assets.Scripts.Models.Towers.TowerModel,Assets.Scripts.Models.TowerSets.TowerDetailsModel)">
            <summary>
            Adds a TowerModel to the official list of TowerModels being used by the game
            <br/>
            Equivalent to calling Game.instance.model.AddTowerToGame(...)
            </summary>
            <param name="newTowerModel">The new tower model</param>
            <param name="towerDetailsModel">A TowerDetailsModel to go with it, if it'll be in the shop</param>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.ActOnMessage(NinjaKiwi.NKMulti.Message)">
            <summary>
            Acts on a Network message that's been sent to the client
            <br/>
            Use Game.instance.GetNKgI().ReadMessage&lt;YOUR_CLASS_NAME&gt;(message) to get back the same object/class you sent.
            <br/>
            If this is one of your messages and you're consuming and acting on it, return true.
            Otherwise, return false. Seriously.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnProfileLoaded(Assets.Scripts.Models.Profile.ProfileModel)">
            <summary>
            Called when the player's ProfileModel is loaded.
            <br/>
            Equivalent to a HarmonyPostFix on ProfileModel_Validate
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.PreCleanProfile(Assets.Scripts.Models.Profile.ProfileModel)">
            <summary>
            Perform actions on a profile right before the Mod Helper cleans it. If you see that the Mod Helper cleans
            past profile data from your mod on startup, it should be removed here.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.PostCleanProfile(Assets.Scripts.Models.Profile.ProfileModel)">
            <summary>
            If you removed any data in PreCleanProfile, you may want to add it back here, or just call <see cref="M:BTD_Mod_Helper.BloonsTD6Mod.OnProfileLoaded(Assets.Scripts.Models.Profile.ProfileModel)"/>
            again on the profile.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnInGameLoaded(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Called when InGame.instance.UnityToSimulation.Simulation is not null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnGameModelLoaded(Assets.Scripts.Models.GameModel)">
            <summary>
            Called when Game.instance.model is not null
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnNewGameModel(Assets.Scripts.Models.GameModel)">
            <summary>
            Called when a new GameModel is created, aka when things like Monkey Knowledge are applied to towers
            <br/>
            Equivalent to a HarmonyPostFix on GameModel_CreatedModded
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerInventoryInitialized(Assets.Scripts.Simulation.Input.TowerInventory,Il2CppSystem.Collections.Generic.List{Assets.Scripts.Models.TowerSets.TowerDetailsModel})">
            <summary>
            Called when the TowerInventory is initialized for a game
            </summary>
            <param name="towerInventory"></param>
            <param name="allTowersInTheGame"></param>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnNewGameModel(Assets.Scripts.Models.GameModel,Il2CppSystem.Collections.Generic.List{Assets.Scripts.Models.Towers.Mods.ModModel})">
            <summary>
            Called when a new GameModel is created, aka when things like Monkey Knowledge are applied to towers
            <br/>
            Equivalent to a HarmonyPostFix on GameModel_CreatedModded
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnMainMenu">
            <summary>
            Called when you go to the main menu screen
            <br/>
            Equivalent to a HarmonyPostFix on MainMenu.OnEnable
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnVictory">
            <summary>
            Called right after a match ends in victory
            <br/>
            Equivalent to a HarmonyPostFix on InGame.OnVictory
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnMatchStart">
            <summary>
            Called right after a match is started up (restart included it seems like)
            <br/>
            Equivalent to a HarmonyPostFix on InGame.StartMatch
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnRestart">
            <summary>
            Called when a match is restarted
            <br/>
            Equivalent to a HarmonyPostFix on InGame.Restart
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnFastForwardChanged(System.Boolean)">
            <summary>
            Called right after a game ends in victory
            <br/>
            Equivalent to a HarmonyPostFix on TimeManager.SetFastForward
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTitleScreen">
            <summary>
            Called right after the game finishes loading everything
            <br/>
            Equivalent to a HarmonyPostFix on TitleScreen.Start
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnMatchEnd">
            <summary>
            Called when the player returns to the MainMenu from a match
            <br/>
            Equivalent to a HarmonyPostFix on InGame.Quit
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.PreBloonLeaked(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Called right before a Bloon would leak.
            Return 'false' to prevent the leak from happening
            <br/>
            Equivalent to a HarmonyPreFix on Bloon.Leaked
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.PostBloonLeaked(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Called right after a Bloon leaks.
            Return 'false' to prevent the leak from happening
            <br/>
            Equivalent to a HarmonyPostFix on Bloon.Leaked
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnBloonCreated(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Called right after a Bloon is first created
            <br/>
            Equivalent to a HarmonyPostFix on Bloon.Initialise
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnBloonModelUpdated(Assets.Scripts.Simulation.Bloons.Bloon,Assets.Scripts.Models.Model)">
            <summary>
            Called right after a Bloon's BloonModel is updated
            <br/>
            Equivalent to a HarmonyPostFix on Bloon.UpdatedModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnBloonDestroy(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Called right after a Bloon is destroyed
            <br/>
            Equivalent to a HarmonyPostFix on Bloon.OnDestroy
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnBloonPopped(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Called right after a Bloon is destroyed, but only when it's popped and not leaked
            </summary>
            <param name="bloon"></param>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.PostBloonDamaged(Assets.Scripts.Simulation.Bloons.Bloon,System.Single,Assets.Scripts.Simulation.Towers.Projectiles.Projectile,System.Boolean,System.Boolean,System.Boolean,Assets.Scripts.Simulation.Towers.Tower,BloonProperties,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Called right after a Bloon is damaged
            <br/>
            Equivalent to a HarmonyPostFix on Bloon.Damaged
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerGraphicsCreated(Assets.Scripts.Models.Towers.TowerModel,Il2CppSystem.Collections.Generic.List{Assets.Scripts.Unity.Display.UnityDisplayNode})">
            <summary>
            Called right before a Tower's 3D graphics are initialized
            <br/>
            Equivalent to a HarmonyPreFix on InputManager.CreateTowerGraphicsAsync
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerCreated(Assets.Scripts.Simulation.Towers.Tower,Assets.Scripts.Simulation.Objects.Entity,Assets.Scripts.Models.Model)">
            <summary>
            Called right after a Tower is initialized
            <br/>
            Equivalent to a HarmonyPostFix on Tower.Initialise
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerDestroyed(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Called right after a Tower is destroyed
            <br/>
            Equivalent to a HarmonyPostFix on Tower.Destroyed
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerSold(Assets.Scripts.Simulation.Towers.Tower,System.Single)">
            <summary>
            Called right after a Tower is sold
            <br/>
            Equivalent to a HarmonyPostFix on Tower.OnSold
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerSelected(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Called right after a Tower is selected by the player
            <br/>
            Equivalent to a HarmonyPostFix on Tower.Highlight
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerDeselected(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Called right after a Tower is deselected by the player
            <br/>
            Equivalent to a HarmonyPostFix on Tower.UnHighlight
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerUpgraded(Assets.Scripts.Simulation.Towers.Tower,System.String,Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Called right after a Tower is upgraded
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerModelChanged(Assets.Scripts.Simulation.Towers.Tower,Assets.Scripts.Models.Model)">
            <summary>
            Called right after a Tower's TowerModel is changed for any reason (creation, upgrading, etc.)
            <br/>
            Equivalent to a HarmonyPostFix on Tower.UpdatedModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerSaved(Assets.Scripts.Simulation.Towers.Tower,Assets.Scripts.Models.Profile.TowerSaveDataModel)">
            <summary>
            Called at the end of each round when a Tower's data is saved
            <br/>
            Use saveData.metaData to save custom information
            <br/>
            Equivalent to a HarmonyPostFix on Tower.GetSavedData
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnTowerLoaded(Assets.Scripts.Simulation.Towers.Tower,Assets.Scripts.Models.Profile.TowerSaveDataModel)">
            <summary>
            Called when you load a save file and a Tower's save data get loaded for the tower
            <br/>
            Use saveData.metaData to load custom information
            <br/>
            Equivalent to a HarmonyPostFix on Tower.SetSavedData
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnCashAdded(System.Double,Assets.Scripts.Simulation.Simulation.CashType,System.Int32,Assets.Scripts.Simulation.Simulation.CashSource,Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Called right after Cash is added in a game
            Tower might be null
            <br/>
            Equivalent to a HarmonyPostFix on Simulation.AddCash
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnCashRemoved(System.Double,Assets.Scripts.Simulation.Simulation.CashType,System.Int32,Assets.Scripts.Simulation.Simulation.CashSource)">
            <summary>
            Called right after Cash is removed in a game
            <br/>
            Equivalent to a HarmonyPostFix on Simulation.RemoveCash
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnRoundStart">
            <summary>
            Called right after a round starts
            <br/>
            Equivalent to a HarmonyPostFix on Simulation.OnRoundStart
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnRoundEnd">
            <summary>
            Called right after a round starts
            <br/>
            Equivalent to a HarmonyPostFix on Simulation.OnRoundEnd
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnDefeat">
            <summary>
            Called right after a match ends in defeat
            <br/>
            Equivalent to a HarmonyPostFix on Simulation.OnDefeat
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnAbilityCast(Assets.Scripts.Simulation.Towers.Behaviors.Abilities.Ability)">
            <summary>
            Called when a ability is cast
            <br/>
            Equivalent to a HarmonyPostFix on Ability.Activate
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnAttackCreated(Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack,Assets.Scripts.Simulation.Objects.Entity,Assets.Scripts.Models.Model)">
            <summary>
            Called right after an Attack is created
            <br/>
            Equivalent to a HarmonyPostFix on Attack.Initialise
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnAttackModelChanged(Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack,Assets.Scripts.Models.Model)">
            <summary>
            Called right after a Tower's Attack is changed for any reason (creation, upgrading, etc.)
            <br/>
            Equivalent to a HarmonyPostFix on Attack.UpdatedModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnWeaponCreated(Assets.Scripts.Simulation.Towers.Weapons.Weapon,Assets.Scripts.Simulation.Objects.Entity,Assets.Scripts.Models.Model)">
            <summary>
            Called right after a Weapon is created
            <br/>
            Equivalent to a HarmonyPostFix on Weapon.Initialise
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnWeaponFire(Assets.Scripts.Simulation.Towers.Weapons.Weapon)">
            <summary>
            Called when a weapon fires
            <br/>
            Equivalent to a HarmonyPostFix on Weapon.SpawnDart
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnWeaponModelChanged(Assets.Scripts.Simulation.Towers.Weapons.Weapon,Assets.Scripts.Models.Model)">
            <summary>
            Called right after a Tower's WeaponModel is changed for any reason (creation, upgrading, etc.)
            <br/>
            Equivalent to a HarmonyPostFix on Weapon.UpdatedModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnProjectileCreated(Assets.Scripts.Simulation.Towers.Projectiles.Projectile,Assets.Scripts.Simulation.Objects.Entity,Assets.Scripts.Models.Model)">
            <summary>
            Called right after a Projectile is created
            <br/>
            Equivalent to a HarmonyPostFix on Projectile.Initialise
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnProjectileModelChanged(Assets.Scripts.Simulation.Towers.Projectiles.Projectile,Assets.Scripts.Models.Model)">
            <summary>
            Called right after a Tower's TowerModel is changed for any reason (creation, upgrading, etc.)
            <br/>
            Equivalent to a HarmonyPostFix on Projectile.UpdatedModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.OnGameObjectsReset">
            <summary>
            Called when all of the existing GameObjects within a match are destroyed
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.CostForDifficulty(System.Int32,Il2CppSystem.Collections.Generic.List{Assets.Scripts.Models.Towers.Mods.ModModel})">
            <summary>
            Gets a modified cost for a given set of ModModels that are used to setup a match
            Somewhere deep within those mods is likely to be a Cost modifier, and this will find and apply that
            </summary>
            <param name="cost">The default cost</param>
            <param name="mods">The mods that the match is using</param>
            <returns>The modified cost</returns>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.CostForDifficulty(System.Int32,Assets.Scripts.Models.GameModel)">
            <summary>
            Gets a modified cost for a given GameModel's difficulty
            </summary>
            <param name="cost">The default cost</param>
            <param name="gameModel">The current GameModel</param>
            <returns>The modified cost</returns>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsTD6Mod.CostForDifficulty(System.Int32,Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Gets a modified cost for a given instance of InGame
            </summary>
            <param name="cost">The default cost</param>
            <param name="inGame">Current instance of InGame</param>
            <returns>The modified cost</returns>
        </member>
        <member name="M:BTD_Mod_Helper.BTD6_UI.ModdedMonkeySelectMenu.UpdateTowerSet(Assets.Scripts.Unity.UI_New.Main.MonkeySelect.MonkeySelectMenu,System.Int32)">
            <summary>
            Update the currentTowerSet tracker, and change the state if need be
            </summary>
            <param name="__instance"></param>
            <param name="offset"></param>
        </member>
        <member name="M:BTD_Mod_Helper.BTD6_UI.ModdedMonkeySelectMenu.UpdateGameModel(System.String)">
            <summary>
            Changes the order of the TowerDetails in the GameModel
            <br/>
            Their order in the GameModel is what determines their order in the screen
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BTD6_UI.ModdedMonkeySelectMenu.ResetGameModel">
            <summary>
            Put the GameModel's TowerDetails ordering back to normal
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BTD6_UI.ModdedMonkeySelectMenu.Cycle(System.Int32)">
            <summary>
            Change the MonkeySelectButtons on the current page
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:BTD_Mod_Helper.BTD6_UI.ModdedMonkeySelectMenu.RefreshButtons">
            <summary>
            Actually make the displayed buttons change
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.BTD6_UI.ModdedMonkeySelectMenu.MonkeySelectMenu_SwitchTowerSet">
            <summary>
            Possible inputs:
            <br/>
            towerSet=null swipeGesture=false (reOpening=false) - When opening the MonkeySelectMenu from the Main Menu
            <br/>
            towerSet=not null swipeGesture=true (reOpening=false) - When swiping or clicking the left/right buttons
            <br/>
            towerSet=not null swipeGesture=false (reOpening=false) - When clicking the MonkeyGroupButtons, also the initial call to Open()
            <br/>
            towerSet=not null swipeGesture=false (reOpening=true) - Called during our calls to Open() to change the buttons
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonBehaviorExt.HasBloonBehavior``1(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonBehaviorExt.GetBloonBehavior``1(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonBehaviorExt.GetBloonBehaviors``1(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonBehaviorExt.AddBloonBehavior``1(Assets.Scripts.Simulation.Bloons.Bloon,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="bloon"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonBehaviorExt.RemoveBloonBehavior``1(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="bloon"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonBehaviorExt.RemoveBloonBehavior``1(Assets.Scripts.Simulation.Bloons.Bloon,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="bloon"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonBehaviorExt.RemoveBloonBehaviors``1(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="bloon"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponBehaviorExt.HasWeaponBehavior``1(Assets.Scripts.Simulation.Towers.Weapons.Weapon)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponBehaviorExt.GetWeaponBehavior``1(Assets.Scripts.Simulation.Towers.Weapons.Weapon)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponBehaviorExt.GetWeaponBehaviors``1(Assets.Scripts.Simulation.Towers.Weapons.Weapon)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponBehaviorExt.AddWeaponBehavior``1(Assets.Scripts.Simulation.Towers.Weapons.Weapon,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="weapon"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponBehaviorExt.RemoveWeaponBehavior``1(Assets.Scripts.Simulation.Towers.Weapons.Weapon)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="weapon"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponBehaviorExt.RemoveWeaponBehavior``1(Assets.Scripts.Simulation.Towers.Weapons.Weapon,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="weapon"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponBehaviorExt.RemoveWeaponBehaviors``1(Assets.Scripts.Simulation.Towers.Weapons.Weapon)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="weapon"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt.HasProjectileBehavior``1(Assets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="attack"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt.GetProjectileBehavior``1(Assets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="attack"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt.GetProjectileBehaviors``1(Assets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="attack"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt.AddProjectileBehavior``1(Assets.Scripts.Simulation.Towers.Projectiles.Projectile,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="attack"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt.RemoveProjectileBehavior``1(Assets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="attack"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt.RemoveProjectileBehavior``1(Assets.Scripts.Simulation.Towers.Projectiles.Projectile,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="attack"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileBehaviorExt.RemoveProjectileBehaviors``1(Assets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="attack"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackBehaviorExt.HasAttackBehavior``1(Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="attack"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackBehaviorExt.GetAttackBehavior``1(Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="attack"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackBehaviorExt.GetAttackBehaviors``1(Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="attack"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackBehaviorExt.AddAttackBehavior``1(Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="attack"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackBehaviorExt.RemoveAttackBehavior``1(Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="attack"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackBehaviorExt.RemoveAttackBehavior``1(Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="attack"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackBehaviorExt.RemoveAttackBehaviors``1(Assets.Scripts.Simulation.Towers.Behaviors.Attack.Attack)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="attack"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerBehaviorExt.HasTowerBehavior``1(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="tower"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerBehaviorExt.GetTowerBehavior``1(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerBehaviorExt.GetTowerBehaviors``1(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerBehaviorExt.AddTowerBehavior``1(Assets.Scripts.Simulation.Towers.Tower,``0)">
            <summary>
            Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerBehaviorExt.RemoveTowerBehavior``1(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerBehaviorExt.RemoveTowerBehavior``1(Assets.Scripts.Simulation.Towers.Tower,``0)">
            <summary>
            Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerBehaviorExt.RemoveTowerBehaviors``1(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.CollectionExtensions.ArrayExt.ToSizedList``1(``0[])">
            <summary>
            Not Tested
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.CollectionExtensions.ArrayExt.TryCast``1(UnhollowerBaseLib.Il2CppObjectBase,``0@)">
            <summary>
            Version of TryCast without the generic restriction
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.ToSizedList``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            Not tested
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.ToList``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return as System.List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="il2CppList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.ToArray``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return as an Array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="il2CppList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.ToIl2CppReferenceArray``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return as Il2CppReferenceArray
            </summary>
            <typeparam name="T"></typeparam>
            <param name="il2CppList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.ToLockList``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return as LockList
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.Duplicate``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return a duplicate of this List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.DuplicateAs``2(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return a duplicate of this list as type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.HasItemsOfType``2(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Check if this has any items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type you're checking for</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.GetItemOfType``2(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return the first item of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.GetItemsOfType``2(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return all Items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items you want</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.RemoveItemOfType``2(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.RemoveItem``2(Il2CppSystem.Collections.Generic.List{``0},``1)">
            <summary>
            (Cross-Game compatible) Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="list"></param>
            <param name="itemToRemove">The specific Item to remove</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericsExt.RemoveItemsOfType``2(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return this with all Items of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items that you want to remove</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.ToSizedList``1(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            Not tested
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.Empty``1(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            Returns an empty <see cref="T:UnhollowerBaseLib.Il2CppReferenceArray`1"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="referenceArray"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.Clear``1(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            Sets all elements in the <see cref="T:UnhollowerBaseLib.Il2CppReferenceArray`1"/> to the default value of each element type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="referenceArray"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.ToList``1(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            (Cross-Game compatible) Return as System.List
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.ToIl2CppList``1(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            (Cross-Game compatible) Return as Il2CppSystem.List
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.ToArray``1(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            (Cross-Game compatible) Return as a System.Array
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.ToLockList``1(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            (Cross-Game compatible) Return as LockList
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.Duplicate``1(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            (Cross-Game compatible) Return a duplicate of this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.DuplicateAs``2(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            (Cross-Game compatible) Return a duplicate of this as type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.AddTo``1(UnhollowerBaseLib.Il2CppReferenceArray{``0},``0)">
            <summary>
            (Cross-Game compatible) Return this with an additional Item added to it
            </summary>
            <typeparam name="T">The Type of the Item to add</typeparam>
            <param name="referenceArray"></param>
            <param name="objectToAdd">Item to add</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.AddTo``1(UnhollowerBaseLib.Il2CppReferenceArray{``0},UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            (Cross-Game compatible) Return this with additional Items added to it
            </summary>
            <typeparam name="T">The Type of the Items to add</typeparam>
            <param name="referenceArray"></param>
            <param name="objectsToAdd">Items to add</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.AddTo``1(UnhollowerBaseLib.Il2CppReferenceArray{``0},System.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return this with additional Items added to it
            </summary>
            <typeparam name="T">The Type of the Items to add</typeparam>
            <param name="referenceArray"></param>
            <param name="objectsToAdd">Items to add</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.HasItemsOfType``2(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            (Cross-Game compatible) Check if this has any items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type you're checking for</typeparam>
            <param name="referenceArray"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.GetItemOfType``2(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            (Cross-Game compatible) Return the first item of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want</typeparam>
            <param name="referenceArray"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.GetItemsOfType``2(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            (Cross-Game compatible) Return all Items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items you want</typeparam>
            <param name="referenceArray"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.RemoveItemOfType``2(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            (Cross-Game compatible) Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="referenceArray"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.RemoveItemOfType``2(UnhollowerBaseLib.Il2CppReferenceArray{``0},Assets.Scripts.Models.Model)">
            <summary>
            (Cross-Game compatible) Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="referenceArray"></param>
            <param name="removeChildFrom">Model to remove the child dependents from</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.RemoveItem``2(UnhollowerBaseLib.Il2CppReferenceArray{``0},``1)">
            <summary>
            (Cross-Game compatible) Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="referenceArray"></param>
            <param name="itemToRemove">The specific Item to remove</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.RemoveItemsOfType``2(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            (Cross-Game compatible) Return this with all Items of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items that you want to remove</typeparam>
            <param name="referenceArray"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArrayExt.RemoveItemsOfType``2(UnhollowerBaseLib.Il2CppReferenceArray{``0},Assets.Scripts.Models.Model)">
            <summary>
            (Cross-Game compatible) Return this with all Items of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items that you want to remove</typeparam>
            <param name="referenceArray"></param>
            <param name="removeChildFrom">Model to remove the child dependents from</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.ToSizedList``1(System.Collections.Generic.List{``0})">
            <summary>
            Not tested
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.ToIl2CppList``1(System.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return as Il2CppSystem.List
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.ToIl2CppReferenceArray``1(System.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return as Il2CppReferenceArray
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.ToLockList``1(System.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return as LockList
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.Duplicate``1(System.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return a duplicate of this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.DuplicateAs``2(System.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return a duplicate of this as type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.SaveToFile``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            (Cross-Game compatible) Save a list to file
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list you want to save</param>
            <param name="filePath">The FilePath you want to save it to</param>
            <returns>True if successful, false if it fails</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.LoadFromFile``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            (Cross-Game compatible) Load a List from a FilePath
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="filePath">FilePath of the saved List</param>
            <returns>The loaded List if successful, otherwise default value</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.LoadFromFile``1(System.Collections.Generic.List{``0},System.String,System.Boolean@)">
            <summary>
            (Cross-Game compatible) Load a List from a FilePath
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="filePath">FilePath of the saved List</param>
            <param name="success">Will be true if the List was successfully loaded, otherwise will be false</param>
            <returns>The loaded List if successful, otherwise default value</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.HasItemsOfType``2(System.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Check if this has any items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type you're checking for</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.GetItemOfType``2(System.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return the first item of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.GetItemsOfType``2(System.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return all Items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items you want</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.RemoveItemOfType``2(System.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.RemoveItem``2(System.Collections.Generic.List{``0},``1)">
            <summary>
            (Cross-Game compatible) Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="list"></param>
            <param name="itemToRemove">The specific Item to remove</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ListExt.RemoveItemsOfType``2(System.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return this with all Items of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items that you want to remove</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.ToSizedList``1(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            Not Tested
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.ToList``1(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Return as System.List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.ToIl2CppList``1(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Return as Il2CppSystem.List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.ToArray``1(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Return as System.Array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.ToIl2CppReferenceArray``1(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Return as Il2CppReferenceArray
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.Duplicate``1(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Return a duplicate of this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.DuplicateAs``2(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Return a duplicate of this as type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.AddTo``2(Assets.Scripts.Utils.LockList{``0},``1)">
            <summary>
            (Cross-Game compatible) Return this with an additional Item added to it
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item to add</typeparam>
            <param name="lockList"></param>
            <param name="objectToAdd">Item to add</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.HasItemsOfType``2(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Check if this has any items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type you're checking for</typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.GetItemOfType``2(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Return the first item of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want</typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.GetItemsOfType``2(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Return all Items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items you want</typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.RemoveItemOfType``2(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.RemoveItem``2(Assets.Scripts.Utils.LockList{``0},``1)">
            <summary>
            (Cross-Game compatible) Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="lockList"></param>
            <param name="itemToRemove">The specific Item to remove</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedListExt.RemoveItemsOfType``2(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Return this with all Items of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items that you want to remove</typeparam>
            <param name="lockList"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SizedListExt.ToLockList``1(Assets.Scripts.Utils.SizedList{``0})">
            <summary>
            Not Tested
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SizedListExt.ForEach``1(Assets.Scripts.Utils.SizedList{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action">Action to preform on each element</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SizedListExt.First``1(Assets.Scripts.Utils.SizedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the first element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SizedListExt.FirstOrDefault``1(Assets.Scripts.Utils.SizedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the first element that matches the predicate, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SizedListExt.Where``1(Assets.Scripts.Utils.SizedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return all elements that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SizedListExt.FindIndex``1(Assets.Scripts.Utils.SizedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the index of the element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SizedListExt.Any``1(Assets.Scripts.Utils.SizedList{``0})">
            <summary>
            Return whether or not there are any elements in this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SizedListExt.Any``1(Assets.Scripts.Utils.SizedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return whether or not there are any elements in this that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SizedListExt.Last``1(Assets.Scripts.Utils.SizedList{``0})">
            <summary>
            Return the last item in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SizedListExt.LastOrDefault``1(Assets.Scripts.Utils.SizedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return the last item in the collection that meets the condition, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SizedListExt.First``1(Assets.Scripts.Utils.SizedList{``0})">
            <summary>
            Return the first element in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SizedListExt.FirstOrDefault``1(Assets.Scripts.Utils.SizedList{``0})">
            <summary>
            Return the first element in the collection, or return default if it's null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NKMultiGameInterfaceExt.SendMessage(NinjaKiwi.NKMulti.NKMultiGameInterface,NinjaKiwi.NKMulti.Message)">
            <summary>
            Send a Message to all players in the lobby
            </summary>
            <param name="message">Message to send</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NKMultiGameInterfaceExt.SendMessage``1(NinjaKiwi.NKMulti.NKMultiGameInterface,``0,System.Nullable{System.Byte},System.String)">
            <summary>
            Convert an object to json and send it players or a player in the lobby
            </summary>
            <param name="objectToSend">Object you want to send</param>
            <param name="peerId">The id of the peer you want the message to go to. Leave null if you want to send to all players</param>
            <param name="code">Coop code used to distinguish this message from others. Like a lock and key for reading messages</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NKMultiGameInterfaceExt.SendMessage(NinjaKiwi.NKMulti.NKMultiGameInterface,Il2CppSystem.String,System.Nullable{System.Byte},System.String)">
            <summary>
            Send a string to players or a player in the lobby
            </summary>
            <param name="objectToSend">string message to send. Can be JSON</param>
            <param name="peerId">The id of the peer you want the message to go to. Leave null if you want to send to all players</param>
            <param name="code">Coop code used to distinguish this message from others. Like a lock and key for reading messages</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NKMultiGameInterfaceExt.ReadMessage``1(NinjaKiwi.NKMulti.NKMultiGameInterface,UnhollowerBaseLib.Il2CppStructArray{System.Byte})">
            <summary>
            Convert messageBytes to an object of type T
            </summary>
            <typeparam name="T">Type to convert bytes to</typeparam>
            <param name="messageBytes">messageBytes</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NKMultiGameInterfaceExt.ReadMessage``1(NinjaKiwi.NKMulti.NKMultiGameInterface,NinjaKiwi.NKMulti.Message)">
            <summary>
            Convert a Message's bytes to an object of type T
            </summary>
            <typeparam name="T">Type to convert bytes to</typeparam>
            <param name="message">Message you want to read</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.NKMultiGameInterfaceExt.ReadChatMessage(NinjaKiwi.NKMulti.NKMultiGameInterface,NinjaKiwi.NKMulti.Message)">
            <summary>
            Used to read messages from BTD6 InGameChat Mod. If Message is a ChatMessage, will be converted to a Chat_Message object
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.DisplayNodeExtensions.DumpNodeExt.Dump(Assets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Only runs when tower placed.
            Dumps any textures inside of a display node into Ninja Kiwi directory
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.DisplayModelExt">
            <summary>
            Extensions for DisplayModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.DisplayModelExt.ApplyDisplay``1(Assets.Scripts.Models.GenericBehaviors.DisplayModel)">
            <summary>
            Applies a given ModDisplay to this DisplayModel
            </summary>
            <typeparam name="T">The type of ModDisplay</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.DoesTowerModelExist(Assets.Scripts.Models.GameModel,System.String)">
            <summary>
            Returns whether or not any TowerModels in <see cref="P:Assets.Scripts.Models.GameModel.towers"/> have <paramref name="towerId"/>
            in it's name
            </summary>
            <param name="model"></param>
            <param name="towerId"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BTD_Mod_Helper.Extensions.GameModelExt.DoesTowerDetailsExist(Assets.Scripts.Models.GameModel,System.String)" -->
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddTowerToGame(Assets.Scripts.Models.GameModel,Assets.Scripts.Models.Towers.TowerModel,Assets.Scripts.Models.TowerSets.TowerDetailsModel)">
            <summary>
            Add a TowerModel to the game.
            <br/>
            Using this method is preferable than modifying the GameModel's towers list manually, as this does more things
            to more fully integrate the tower within the game
            </summary>
            <param name="towerModel">TowerModel to add</param>
            <param name="towerDetailsModel">Optionally add a TowerDetailsModel for your towerModel</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddTowersToGame(Assets.Scripts.Models.GameModel,System.Collections.Generic.IEnumerable{Assets.Scripts.Models.Towers.TowerModel})">
            <summary>
            Add multiple TowerModels to the game more efficiently than calling the single method repeatedly.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddTowerDetails(Assets.Scripts.Models.GameModel,Assets.Scripts.Models.TowerSets.TowerDetailsModel)">
            <summary>
            Adds a tower 
            </summary>
            <param name="model"></param>
            <param name="towerDetailsModel"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddTowerDetails(Assets.Scripts.Models.GameModel,Assets.Scripts.Models.TowerSets.TowerDetailsModel,System.String)">
            <summary>
            Adds a TowerDetailsModel to the GameModel's TowerSet, taking into account what set of towers it's a part of
            <br/>
            For example, a new custom Primary tower would be added right at the end of the primary towers,
            and right before the start of the military towers
            </summary>
            <param name="model">The GameModel</param>
            <param name="towerDetailsModel">The TowerDetailsModel to be added</param>
            <param name="set">The TowerSet of the tower to be added</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddTowerDetails(Assets.Scripts.Models.GameModel,Assets.Scripts.Models.TowerSets.TowerDetailsModel,System.Int32)">
            <summary>
            Adds a TowerDetailsModel to the GameModel's TowerSet at a particular index
            </summary>
            <param name="model"></param>
            <param name="towerDetailsModel"></param>
            <param name="index"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.AddHeroDetails(Assets.Scripts.Models.GameModel,Assets.Scripts.Models.TowerSets.HeroDetailsModel,System.Int32)">
            <summary>
            Adds a HeroDetailsModel to the GameModel's HeroSet at a particular index
            </summary>
            <param name="model"></param>
            <param name="heroDetailsModel"></param>
            <param name="index"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetAllTowerDetails(Assets.Scripts.Models.GameModel)">
            <summary>
            Return all TowerDetailModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetAllShopTowerDetails(Assets.Scripts.Models.GameModel)">
            <summary>
            Return all ShopTowerDetailModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetTowerModels(Assets.Scripts.Models.GameModel,System.String)">
            <summary>
            Return all TowerModels with a specific base id
            </summary>
            <param name="towerBaseId">The base id all towers should share. Example: "DartMonkey"</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetTowerModel(Assets.Scripts.Models.GameModel,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a TowerModel from model.towers.
            NOTE: model.GetTower cannot get custom towers so use this method instead
            </summary>
            <param name="model"></param>
            <param name="towerId"></param>
            <param name="path1"></param>
            <param name="path2"></param>
            <param name="path3"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.CreateBloonEmissions(Assets.Scripts.Models.GameModel,Assets.Scripts.Models.Bloons.BloonModel,System.Int32,System.Single)">
            <summary>
            Create a BloonEmissionModel from a bloonModel
            </summary>
            <param name="bloonModel">The bloon model that these bloons should be</param>
            <param name="number">Number of Bloons in this emission</param>
            <param name="spacing">Space between each bloon in this emission</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.CreateBloonEmissions(Assets.Scripts.Models.GameModel,System.String,System.Int32,System.Single)">
            <summary>
            Create a BloonEmissionModel from a bloon's name
            </summary>
            <param name="bloonName">Name of bloon. Example: "Red"</param>
            <param name="number">Number of Bloons in this emission</param>
            <param name="spacing">Space between each bloon in this emission</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.CreateBloonEmission(Assets.Scripts.Models.GameModel,System.String,System.Single)">
            <summary>
            Create a single BloonEmission
            </summary>
            <param name="bloonName">Name of this bloon. Example: "Red"</param>
            <param name="time">Time the bloon should be spawned</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.CreateBloonEmission(Assets.Scripts.Models.GameModel,System.String,System.Single,Il2CppSystem.Collections.Generic.List{Assets.Scripts.Simulation.Bloons.Bloon.ChargedMutator},Il2CppSystem.Collections.Generic.List{Assets.Scripts.Simulation.Objects.BehaviorMutator})">
            <summary>
            Create a single BloonEmission
            </summary>
            <param name="bloonName">Name of this bloon. Example: "Red"</param>
            <param name="time">Time the bloon should be spawned</param>
            <param name="chargedMutators"></param>
            <param name="behaviorMutators"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetAllAttackModels(Assets.Scripts.Models.GameModel)">
            <summary>
            Return all AttackModels from every TowerModel in the game
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetAllWeaponModels(Assets.Scripts.Models.GameModel)">
            <summary>
            Return all WeaponModels from every AttackModel in the game
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetAllProjectileModels(Assets.Scripts.Models.GameModel)">
            <summary>
            Return all ProjectileModels from every TowerModel in the game
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetAllAbilityModels(Assets.Scripts.Models.GameModel)">
            <summary>
            Return all AbilityModels from every TowerModel in the game
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetTowerModelsWithAbilities(Assets.Scripts.Models.GameModel)">
            <summary>
            Return all TowerModels that have at least one AbilityModel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetTowerDetails(Assets.Scripts.Models.GameModel,System.String)">
            <summary>
            Returns the first TowerDetailsModel in <see cref="P:Assets.Scripts.Models.GameModel.towerSet"/> that has a towerId of
            <paramref name="towerDetailsName"/>
            </summary>
            <param name="model"></param>
            <param name="towerDetailsName">The <see cref="P:Assets.Scripts.Models.TowerSets.TowerDetailsModel.towerId"/> you are searching for</param>
            <returns>The first TowerDetailsModel found, otherwise returns null</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.GetBloonModelBuilder(Assets.Scripts.Models.GameModel)">
            <summary>
            (Cross-Game compatible) Return the instance of the API's BloonModelBuilder. Used to create custom bloon types and add them to the game
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameModelExt.DoesBloonExist(Assets.Scripts.Models.GameModel,System.String)">
            <summary>
            Returns whether or not a bloon exists with this name
            </summary>
            <param name="gameModel"></param>
            <param name="bloonName"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.KnowledgeModelExt.GetKnowledgeSet(Assets.Scripts.Models.Towers.Knowledge.KnowledgeModel)">
            <summary>
            Returns the KnowledgeSetModel that contains this KnowledgeModel
            </summary>
            <param name="knowledgeModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.KnowledgeSetModelExt.ContainsKnowledgeModel(Assets.Scripts.Models.Towers.Knowledge.KnowledgeSetModel,Assets.Scripts.Models.Towers.Knowledge.KnowledgeModel)">
            <summary>
            Returns whether or not this KnowledgeSetModel contains <paramref name="containsModel"/>
            </summary>
            <param name="set"></param>
            <param name="containsModel"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ProjectileModelExt">
            <summary>
            Extensions for ProjectileModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelExt.GetDamageModel(Assets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            (Cross-Game compatible) Get the DamageModel behavior from the list of behaviors
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelExt.GetProjectileSims(Assets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            (Cross-Game compatible) Get all Projectile Simulations that have this ProjectileModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelExt.ApplyDisplay``1(Assets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            Applies a given ModDisplay to this ProjectileModel
            </summary>
            <typeparam name="T">The type of ModDisplay</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProfileModelExt.UnlockTower(Assets.Scripts.Models.Profile.ProfileModel,System.String)">
            <summary>
            Add a tower to the list of UnlockedTowers
            </summary>
            <param name="profileModel"></param>
            <param name="towerId">The ID of the tower you want to unlock</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProfileModelExt.UnlockTower(Assets.Scripts.Models.Profile.ProfileModel,System.String,System.Boolean)">
            <summary>
            Add a tower to the list of UnlockedTowers only if the TowerModel is in Game.instance.model.towers
            </summary>
            <param name="profileModel"></param>
            <param name="towerId">The ID of the tower you want to unlock</param>
            <param name="unlockIfTowerModelExists">If set to true the TowerModel will only be unlocked if it has been registered in the game</param>
            <returns>Returns whether or not the tower was unlocked</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonToSimulationExt.GetDisplayNode(Assets.Scripts.Unity.Bridge.BloonToSimulation)">
            <summary>
            Return the DisplayNode for this bloon
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonToSimulationExt.GetUnityDisplayNode(Assets.Scripts.Unity.Bridge.BloonToSimulation)">
            <summary>
            Return the UnityDisplayNode for this bloon. Is apart of DisplayNode. Needed to modify sprites
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonToSimulationExt.GetBloon(Assets.Scripts.Unity.Bridge.BloonToSimulation)">
            <summary>
            Return the Simulation Bloon for this specific BloonToSimulation. Returns object of class Bloon
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonToSimulationExt.GetDistanceTravelled(Assets.Scripts.Unity.Bridge.BloonToSimulation)">
            <summary>
            Return the total distance this BloonToSim has travelled
            </summary>
            <param name="bloonToSim"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonToSimulationExt.GetId(Assets.Scripts.Unity.Bridge.BloonToSimulation)">
            <summary>
            (Cross-Game compatible) Return the Id of this BloonToSimulation
            </summary>
            <param name="bloonToSim"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityExt.GetDisplayNode(Assets.Scripts.Simulation.Objects.Entity)">
            <summary>
            Get the DisplayNode for this Entity
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityExt.GetUnityDisplayNode(Assets.Scripts.Simulation.Objects.Entity)">
            <summary>
            Get the UnityDisplayNode for this Entity
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityExt.GetFactory(Assets.Scripts.Simulation.Objects.Entity)">
            <summary>
            (Cross-Game compatible) Return the Factory that creates Entities
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.GetMonkeyAnimController(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            Get the MonkeyAnimationController for this Tower. Needed to modify 3D models
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.SetTowerModel(Assets.Scripts.Simulation.Towers.Tower,Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Change TowerModel to a different one. Will update display
            </summary>
            <param name="towerModel">TowerModel to change to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.GetDisplayNode(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            (Cross-Game compatible) Return the DisplayNode for this Tower
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.GetUnityDisplayNode(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            (Cross-Game compatible) Return the UnityDisplayNode for this Tower. Is apart of DisplayNode. Needed to modify sprites
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.SellTower(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            (Cross-Game compatible) Sell this tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.GetTowerSim(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            This is Obsolete. Use GetTowerToSim instead. (Cross-Game compatible) Return the TowerToSimulation for this specific Tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.GetTowerToSim(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            (Cross-Game compatible) Return the TowerToSimulation for this specific Tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerExt.GetFactory(Assets.Scripts.Simulation.Towers.Tower)">
            <summary>
            (Cross-Game compatible) Return the Factory that creates Towers
            </summary>
            <param name="tower"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileExt.GetDisplayNode(Assets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Get the DisplayNode for this Projectile
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileExt.GetUnityDisplayNode(Assets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            Get the UnityDisplayNode for this Projectile. Is apart of DisplayNode. Needed to modify sprites
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileExt.GetFactory(Assets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            (Cross-Game compatible) Return the Factory that creates Projectiles
            </summary>
            <param name="projectile"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.WillPopBloon(Assets.Scripts.Simulation.Bloons.Bloon,Assets.Scripts.Simulation.Towers.Projectiles.Projectile)">
            <summary>
            
            </summary>
            <param name="bloon"></param>
            <param name="projectile"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.WasBloonPopped(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            Returns whether or not the bloon was popped rather than leaked.
            </summary>
            <param name="bloon"></param>
            <returns>True if it was popped, false if it was leaked or not destroyed yet</returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.SetCamo(Assets.Scripts.Simulation.Bloons.Bloon,System.Boolean)">
            <summary>
            Set bloon to be camo or not. Will change bloonModel to camo version if it exists
            </summary>
            <param name="isCamo">Should bloon be camo</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.SetFortified(Assets.Scripts.Simulation.Bloons.Bloon,System.Boolean)">
            <summary>
            Set bloon to be fortified or not. Will change bloonModel to fortified version if it exists
            </summary>
            <param name="isFortified">Should bloon be fortified</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.SetRegrow(Assets.Scripts.Simulation.Bloons.Bloon,System.Boolean)">
            <summary>
            Set bloon to be regrow or not. Will change bloonModel to regrow version if it exists
            </summary>
            <param name="isRegrow">Should bloon be regrow</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.RemoveBloonStatus(Assets.Scripts.Simulation.Bloons.Bloon,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Remove current statuses from bloon
            </summary>
            <param name="removeCamo">Should remove camo if present?</param>
            <param name="removeFortify">Should remove fortify if present?</param>
            <param name="removeRegrow">Should remove regrow if present?</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.SetBloonStatus(Assets.Scripts.Simulation.Bloons.Bloon,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the statuses of the bloon. Will change bloonModel if one exists with these statuses
            </summary>
            <param name="setCamo">Should have camo?</param>
            <param name="setFortified">Should have fortify?</param>
            <param name="setRegrow">Should have regrow?</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.GetDisplayNode(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            (Cross-Game compatible) Return the DisplayNode for this bloon
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.GetUnityDisplayNode(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            (Cross-Game compatible) Return the UnityDisplayNode for this bloon. Is apart of DisplayNode. Needed to modify sprites
            </summary>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.GetBloonToSim(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            (Cross-Game compatible) Return the existing BloonToSimulation for this specific Bloon.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.CreateBloonToSim(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            (Cross-Game compatible) Creates a new BloonToSimulation based off of this Bloon and stores it for possible later use. It will automatically destroyed when this Bloon is destroyed
            </summary>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.GetId(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            (Cross-Game compatible) Return the Id of this Bloon
            </summary>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonExt.GetFactory(Assets.Scripts.Simulation.Bloons.Bloon)">
            <summary>
            (Cross-Game compatible) Return the Factory that creates Bloons
            </summary>
            <param name="bloon"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetSaveDirectory(Assets.Scripts.Unity.Game)">
            <summary>
            Returns the directory where the Player's Profile.save file is located.
            Not set until after reaching the Main Menu for the first time
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.SavePlayerData(Assets.Scripts.Unity.Game,System.String)">
            <summary>
            Makes a save of Player.Save at the specified path
            </summary>
            <param name="game"></param>
            <param name="savePath">Path to save to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.CanGetFlagged(Assets.Scripts.Unity.Game)">
            <summary>
            Checks if Player is in a game mode that would get them flagged if using mods
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.IsInRace(Assets.Scripts.Unity.Game)">
            <summary>
            Returns if Player is in a race
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.IsInPublicCoop(Assets.Scripts.Unity.Game)">
            <summary>
            Returns if Player is in a public co-op match
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.IsInOdyssey(Assets.Scripts.Unity.Game)">
            <summary>
            Returns if Player is in a Odyssey game
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetNkGI(Assets.Scripts.Unity.Game)">
            <summary>
            Get nkGI for the current session. Will be null if not in multiplayer game or lobby
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetDisplayFactory(Assets.Scripts.Unity.Game)">
            <summary>
            Get the Unity Display Factory that manages on screen sprites. This Factory is different from other Factories in the game
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetJsonSerializer(Assets.Scripts.Unity.Game)">
            <summary>
            Gets a Json Serializer. Not necessary but can be useful
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetPopupScreen(Assets.Scripts.Unity.Game)">
            <summary>
            Get the instance of PopupScreen
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetShopMenu(Assets.Scripts.Unity.Game)">
            <summary>
            Get the instance of ShopMenu
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetCommonForegroundScreen(Assets.Scripts.Unity.Game)">
            <summary>
            Get the instance of CommonForegroundScreen
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetCommonBackgroundScreen(Assets.Scripts.Unity.Game)">
            <summary>
            Get the instance of CommonBackgroundScreen
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetLocalizationManager(Assets.Scripts.Unity.Game)">
            <summary>
            Get the instance of LocalizationManager
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetMenuManager(Assets.Scripts.Unity.Game)">
            <summary>
            Get the instance of MenuManager
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetUI(Assets.Scripts.Unity.Game)">
            <summary>
            Get the instance of UI
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetTowerListForTowerType(Assets.Scripts.Unity.Game,System.String)">
            <summary>
            Not tested
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetBtd6Player(Assets.Scripts.Unity.Game)">
            <summary>
            Get the Btd6Player data for the player. Contains different info than PlayerProfile
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetTowerDetailModels(Assets.Scripts.Unity.Game)">
            <summary>
            Get all TowerDetailModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetHeroDetailModels(Assets.Scripts.Unity.Game)">
            <summary>
            Get all HeroDetailModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetPowerDetailModels(Assets.Scripts.Unity.Game)">
            <summary>
            Get all PowerDetailModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetMonkeyMoney(Assets.Scripts.Unity.Game)">
            <summary>
            Get player's current Monkey Money amount
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.AddMonkeyMoney(Assets.Scripts.Unity.Game,System.Double)">
            <summary>
            Add Monkey Money to player's total Monkey Money
            </summary>
            <param name="amount">Amount to add</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.SetMonkeyMoney(Assets.Scripts.Unity.Game,System.Double)">
            <summary>
            Set player's Monkey Money amount
            </summary>
            <param name="amount">Value to set Monkey Money to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetMapLoader(Assets.Scripts.Unity.Game)">
            <summary>
            (Cross-Game compatible) Returns the instance of the Map Loader.
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.CreateSpriteReference(Assets.Scripts.Unity.Game,System.String)">
            <summary>
            (Cross-Game compatible) Returns a new SpriteReference that uses the given guid
            </summary>
            <param name="game"></param>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.IsAccountFlagged(Assets.Scripts.Unity.Game)">
            <summary>
            (Cross-Game compatible) Returns whether or not the player's account is currently flagged/hackerpooled
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.ScheduleTask(Assets.Scripts.Unity.Game,System.Collections.IEnumerator)">
            <summary>
            (Cross-Game compatible) Schedule a task to execute right now as a Coroutine
            </summary>
            <param name="game"></param>
            <param name="iEnumerator"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.ScheduleTask(Assets.Scripts.Unity.Game,System.Action,System.Func{System.Boolean})">
            <summary>
            (Cross-Game compatible) Schedule a task to execute later on as a Coroutine. By default will wait until the end of this current frame
            </summary>
            <param name="game"></param>
            <param name="action">The action you want to execute once it's time to run your task</param>
            <param name="waitCondition">Wait for this to be true before executing task</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.ScheduleTask(Assets.Scripts.Unity.Game,System.Action,BTD_Mod_Helper.Api.Enums.ScheduleType,System.Int32,System.Func{System.Boolean})">
            <summary>
            (Cross-Game compatible) Schedule a task to execute later on as a Coroutine
            </summary>
            <param name="game"></param>
            <param name="action">The action you want to execute once it's time to run your task</param>
            <param name="scheduleType">How you want to wait for your task</param>
            <param name="amountToWait">The amount you want to wait</param>
            /// <param name="waitCondition">Wait for this to be true before executing task</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetPlayerLiNKAccount(Assets.Scripts.Unity.Game)">
            <summary>
            (Cross-Game compatible) Get Player LinkAccount. Contains limited info about player's NinjaKiwi account
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetPlayerProfile(Assets.Scripts.Unity.Game)">
            <summary>
            (Cross-Game compatible) Get the ProfileModel for the Player
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetPlayerService(Assets.Scripts.Unity.Game)">
            <summary>
            (Cross-Game compatible) Get the PlayerService for the player
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.GetModel(Assets.Scripts.Unity.Game)">
            <summary>
            (Cross-Game compatible) Get GameModel. Same as using Game.instance.model
            </summary>
            <param name="game"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.ShowMessage(Assets.Scripts.Unity.Game,System.String,System.String)">
            <summary>
            (Cross-Game compatible) Uses custom message popup to show a message in game. Currently only works in active game sessions and not on Main Menu
            </summary>
            <param name="message">Message body</param>
            <param name="title">Message title. Will be mod name by default</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameExt.ShowMessage(Assets.Scripts.Unity.Game,System.String,System.Single,System.String)">
            <summary>
            (Cross-Game compatible) Uses custom message popup to show a message in game. Currently only works in active game sessions and not on Main Menu
            </summary>
            <param name="message">Message body</param>
            <param name="displayTime">Time to show message on screen</param>
            <param name="title">Message title. Will be mod name by default</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SetRoundSet(Assets.Scripts.Unity.UI_New.InGame.InGame,Assets.Scripts.Models.Rounds.RoundSetModel)">
            <summary>
            Custom API method that changes the game's round set to a custom RoundSetModel.
            </summary>
            <param name="roundSet">New Round Set Model to use</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetInGameUI(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the game object that owns all InGame UI elements
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetCashManager(Assets.Scripts.Unity.UI_New.InGame.InGame,System.Int32)">
            <summary>
            Get the Cash Manager for the current game
            </summary>
            <param name="index">Index of the cash manager. Default is 0</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetCash(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the Player's current cash
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.AddCash(Assets.Scripts.Unity.UI_New.InGame.InGame,System.Double)">
            <summary>
            Add cash to the Player's wallet
            </summary>
            <param name="amount">Amount of cash to add to player wallet</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SetCash(Assets.Scripts.Unity.UI_New.InGame.InGame,System.Double)">
            <summary>
            Set the Player's cash to a specific amount
            </summary>
            <param name="amount">Value to set cash to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetHealth(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the Player's current health
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.AddHealth(Assets.Scripts.Unity.UI_New.InGame.InGame,System.Double)">
            <summary>
            Add health to the players current health
            </summary>
            <param name="amount">Amount of health to add</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SetHealth(Assets.Scripts.Unity.UI_New.InGame.InGame,System.Double)">
            <summary>
            Set player's health to specific amount
            </summary>
            <param name="amount">Value to set health to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetMaxHealth(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the player's max health
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.AddMaxHealth(Assets.Scripts.Unity.UI_New.InGame.InGame,System.Double)">
            <summary>
            Add to the player's max health
            </summary>
            <param name="amount">Amount to add to the player's max health</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SetMaxHealth(Assets.Scripts.Unity.UI_New.InGame.InGame,System.Double)">
            <summary>
            Set the player's maximum health to a new value
            </summary>
            <param name="amount">Value to set max health to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetPoppedBloons(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get collection of popped bloons in this game. Right now only works for current games. Does not store results from loaded games 
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetTowerInventory(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            Get the current instance of TowerInventory being used in this game session
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SetRound(Assets.Scripts.Unity.UI_New.InGame.InGame,System.Int32)">
            <summary>
            Set the current round
            </summary>
            <param name="inGame"></param>
            <param name="round"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SpawnBloons(Assets.Scripts.Unity.UI_New.InGame.InGame,System.String,System.Int32,System.Single)">
            <summary>
            Spawn bloons in game
            </summary>
            <param name="inGame"></param>
            <param name="bloonName"></param>
            <param name="number"></param>
            <param name="spacing"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SpawnBloons(Assets.Scripts.Unity.UI_New.InGame.InGame,System.Collections.Generic.List{Assets.Scripts.Models.Rounds.BloonEmissionModel})">
            <summary>
            Spawn bloons in game
            </summary>
            <param name="inGame"></param>
            <param name="bloonEmissionModels"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SpawnBloons(Assets.Scripts.Unity.UI_New.InGame.InGame,Il2CppSystem.Collections.Generic.List{Assets.Scripts.Models.Rounds.BloonEmissionModel})">
            <summary>
            Spawn bloons in game
            </summary>
            <param name="inGame"></param>
            <param name="bloonEmissionModels"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SpawnBloons(Assets.Scripts.Unity.UI_New.InGame.InGame,UnhollowerBaseLib.Il2CppReferenceArray{Assets.Scripts.Models.Rounds.BloonEmissionModel})">
            <summary>
            Spawn bloons in game
            </summary>
            <param name="inGame"></param>
            <param name="bloonEmissionModels"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.SpawnBloons(Assets.Scripts.Unity.UI_New.InGame.InGame,System.Int32)">
            <summary>
            Spawn bloons in game
            </summary>
            <param name="inGame"></param>
            <param name="round"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.IsInGame(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            (Cross-Game compatible) Returns whether or not the player is currently in a game.
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetMap(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            (Cross-Game compatible) Get the current Map
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetSimulation(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            (Cross-Game compatible) Get the current Simulation for this InGame session
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetGameModel(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            (Cross-Game compatible) The Game.model that is being used for this InGame.instance
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetMainFactory(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            (Cross-Game compatible) Get the main Factory that creates and manages all other Factories
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetFactory``1(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            (Cross-Game compatible) Get the Factory for a specific Type. Ex: Getting the Factory that makes Towers
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetTowers(Assets.Scripts.Unity.UI_New.InGame.InGame,System.String)">
            <summary>
            (Cross-Game compatible) Get every Tower that has been created through the Tower Factory
            </summary>
            <param name="inGame"></param>
            <param name="name">Optionally only get Towers whose TowerModel name is this paramater</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetTowerSims(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            This is Obsolete, use GetAllTowerToSim instead. (Cross-Game compatible) Get all TowerToSimulations
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetAllTowerToSim(Assets.Scripts.Unity.UI_New.InGame.InGame,System.String)">
            <summary>
            (Cross-Game compatible) Get all TowerToSimulations
            </summary>
            <param name="inGame"></param>
            /// <param name="name">Optionally only get Towers whose TowerModel name is this paramater</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetBloons(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            (Cross-Game compatible) Get's all Bloons on the map
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetBloonSims(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            This is Obsolete, use GetAllBloonToSim instead. (Cross-Game compatible) Get's all existing BloonToSimulations
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetAllBloonToSim(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            (Cross-Game compatible) Get's all existing BloonToSimulations
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetProjectiles(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            (Cross-Game compatible) Get's all existing Projectiles on the map
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetTowerManager(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            (Cross-Game compatible) Get the current TowerManager for this game session
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetAbilities(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            (Cross-Game compatible) Get's all AbilityToSimulations currently in the game
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetUnityToSimulation(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            (Cross-Game compatible) Get's the UnityToSimulation for this game
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetAllObjectsOfType``1(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            (Cross-Game compatible) Gets all objects of type T. Does this by returning all objects created by the Factory of type T
            </summary>
            <typeparam name="T">The type of items you want</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.InGameExt.GetDifficulty(Assets.Scripts.Unity.UI_New.InGame.InGame)">
            <summary>
            (Cross-Game compatible) Returns the difficulty of this game
            </summary>
            <param name="inGame"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerDetailsModelExt.IsHero(Assets.Scripts.Models.TowerSets.TowerDetailsModel)">
            <summary>
            Returns if this TowerDetailModel is actually for a Hero
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerDetailsModelExt.GetTowerPurchaseButton(Assets.Scripts.Models.TowerSets.TowerDetailsModel)">
            <summary>
            Get the TowerPurchaseButton that is used to buy this specific TowerDetailModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerDetailsModelExt.GetShopTowerDetails(Assets.Scripts.Models.TowerSets.TowerDetailsModel)">
            <summary>
            Get the ShopTowerDetails for this TowerDetailModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerDetailsModelExt.SetName(Assets.Scripts.Models.TowerSets.TowerDetailsModel,System.String)">
            <summary>
            Sets the name of this TowerDetailsModel, following the naming convention of ofther TowerDetailModels.
            Example, using "NewMonkey" will set the name to "TowerDetailsModel_NewMonkey"
            </summary>
            <param name="towerDetailsModel"></param>
            <param name="newName"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.SetMaxAmount(Assets.Scripts.Models.Towers.TowerModel,System.Int32)">
            <summary>
            Not Tested. Use to set the maximum allowed number of this tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetTowerDetailsModel(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return all TowerDetailModels that share a base id with this towerModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetTowerPurchaseButton(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return the TowerPurchaseButton for this TowerModel.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetIndex(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return the number position of this TowerModel in the list of all tower models
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetUpgradeLevel(Assets.Scripts.Models.Towers.TowerModel,System.Int32)">
            <summary>
            Return the current upgrade level of a specific path
            </summary>
            <param name="path">What tier of upgrade is currently applied to tower</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.IsHeroUnlocked(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            If this TowerModel is for a Hero, is this Hero unlocked?
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.IsUpgradeUnlocked(Assets.Scripts.Models.Towers.TowerModel,System.Int32,System.Int32)">
            <summary>
            Has a specific upgrade for this TowerModel been unlocked already?
            </summary>
            <param name="path">Upgrade path</param>
            <param name="tier">Tier of upgrade</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.IsUpgradePathUsed(Assets.Scripts.Models.Towers.TowerModel,System.Int32)">
            <summary>
            Check if a specific upgrade path is being used/ has any upgrades applied to it
            </summary>
            <param name="path">Upgrade path to check</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.HasUpgrade(Assets.Scripts.Models.Towers.TowerModel,System.Int32,System.Int32)">
            <summary>
            Check if an upgrade has been applied
            </summary>
            <param name="path"></param>
            <param name="tier"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.HasUpgrade(Assets.Scripts.Models.Towers.TowerModel,Assets.Scripts.Models.Towers.Upgrades.UpgradeModel)">
            <summary>
            Check if an upgrade has been applied
            </summary>
            <param name="upgradeModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAppliedUpgrades(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Return all UpgradeModels that are currently applied to this TowerModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetUpgrade(Assets.Scripts.Models.Towers.TowerModel,System.Int32,System.Int32)">
            <summary>
            Return the UpgradeModel for a specific upgrade path/tier
            </summary>
            <param name="path"></param>
            <param name="tier"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetHeroModel(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            If this TowerModel is a Hero, return the HeroModel behavior
            </summary>
            <param name="towerModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.MakeCopy(Assets.Scripts.Models.Towers.TowerModel,System.String,System.Boolean,System.String)">
            <summary>
            Duplicate this TowerModel with a unique name. Very useful for making custom TowerModels
            </summary>
            <param name="towerModel"></param>
            <param name="newTowerId">Set's the new towerId of this copy. By default the baseId will be set to this as well</param>
            <param name="newBaseId">Specify a new baseId. Set this if you want a baseId other than the newTowerId</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.HasTiers(Assets.Scripts.Models.Towers.TowerModel,System.Int32,System.Int32,System.Int32)">
            <summary>
            Check if this tower has speficif upgrade tiers
            </summary>
            <param name="towerModel"></param>
            <param name="tier1"></param>
            <param name="tier2"></param>
            <param name="tier3"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetBaseId(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Get the name of the BaseTower. Will be different from this TowerModel's name if this TowerModel isn't a BaseTower
            </summary>
            <param name="towerModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.IsTowerUnlocked(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Has player already unlocked this TowerModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetTowerSims(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            This is Obsolete, use GetAllTowerToSim instead. (Cross-Game compatible) Return all TowerToSimulations with this TowerModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAllTowerToSim(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Return all TowerToSimulations with this TowerModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAbilites(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Return all AbilityModel behaviors from this tower, if it has any
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAbility(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Return the first ability on the tower
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAbility(Assets.Scripts.Models.Towers.TowerModel,System.Int32)">
            <summary>
            (Cross-Game compatible) Return a specific Ability of the tower.
            </summary>
            <param name="index">Index of the ability you want.</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAttackModels(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Return all AttackModel behaviors for this TowerModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAttackModel(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Return the first AttackModel from this TowerModel, if it has one
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAttackModel(Assets.Scripts.Models.Towers.TowerModel,System.Int32)">
            <summary>
            (Cross-Game compatible) Return one of the AttackModels from this TowerModel. By default will give the first AttackModel
            </summary>
            <param name="index">Index of the AttackModel you want</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetWeapons(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Recursively get every WeaponModels this TowerModel has
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetWeapon(Assets.Scripts.Models.Towers.TowerModel,System.Int32)">
            <summary>
            (Cross-Game compatible) Return one of the WeaponModels this TowerModel has. By default will return the first one
            </summary>
            <param name="index">Index of WeaponModel that you want</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetWeapon(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Return the first WeaponModel this TowerModel has, if it has one.
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetAllProjectiles(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Return every ProjectileModels this TowerModel has
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.SellAll(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Sell every tower that uses this TowerModel
            </summary>
            <param name="towerModel"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetTowerId(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Get the TowerId of this TowerModel. Equivalent to towerModel.name
            </summary>
            <param name="towerModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.MakeCopyInternal(Assets.Scripts.Models.Towers.TowerModel,System.String)">
            <summary>
            (Cross-Game compatible) Duplicate this TowerModel with a unique name. Very useful for making custom TowerModels
            </summary>
            <param name="towerModel"></param>
            <param name="newTowerId">Set's the new towerId of this copy. By default the baseId will be set to this as well</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.ApplyDisplay``1(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Applies a given ModDisplay to this TowerModel
            </summary>
            <typeparam name="T">The type of ModDisplay</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetModTower(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Gets the ModTower associated with this TowerModel
            <br/>
            If there is no associated ModTower, returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelExt.GetModTower``1(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            Gets the specific ModTower associated with this TowerModel
            <br/>
            If there is no associated ModTower, returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UpgradeModelExt.IsUpgradeUnlocked(Assets.Scripts.Models.Towers.Upgrades.UpgradeModel)">
            <summary>
            Return whether or not this upgrade has been unlocked by the player
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UpgradeModelExt.GetModUpgrade(Assets.Scripts.Models.Towers.Upgrades.UpgradeModel)">
            <summary>
            Gets the ModUpgrade associated with this UpgradeModel
            <br/>
            If there is no associated ModUpgrade, returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.StandardTowerPurchaseButtonExt.SetBackground(Assets.Scripts.Unity.UI_New.InGame.StoreMenu.StandardTowerPurchaseButton,UnityEngine.Texture2D)">
            <summary>
            Set the background image of this button
            </summary>
            <param name="button"></param>
            <param name="texture2D"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.StandardTowerPurchaseButtonExt.SetBackground(Assets.Scripts.Unity.UI_New.InGame.StoreMenu.StandardTowerPurchaseButton,UnityEngine.Sprite)">
            <summary>
            Set the background image of this button
            </summary>
            <param name="button"></param>
            <param name="sprite"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ImageExt.SetSprite(UnityEngine.UI.Image,Assets.Scripts.Utils.SpriteReference)">
            <summary>
            Set the sprite for this image 
            </summary>
            <param name="image"></param>
            <param name="spriteReference">Sprite to change image to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ImageExt.SaveToPNG(UnityEngine.UI.Image,System.String)">
            <summary>
            (Cross-Game compatible) Saves an image as a PNG files
            Coded in a robust manner that should work for all images, including those with multiple sprites on them being used
            </summary>
            <param name="filePath">Absolute file path on the machine to save the file to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ImageExt.SetSprite(UnityEngine.UI.Image,UnityEngine.Sprite)">
            <summary>
            (Cross-Game compatible) Set the sprite for this image
            </summary>
            <param name="image"></param>
            <param name="sprite">Sprite to change image to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ImageExt.LoadSprite(UnityEngine.UI.Image,Assets.Scripts.Utils.SpriteReference)">
            <summary>
            Loads a sprite reference to this image
            </summary>
            <param name="image"></param>
            <param name="spriteReference"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ImageExt.SetSpriteFromAtlas(UnityEngine.UI.Image,System.String,System.String)">
            <summary>
            Sets the sprite of this image to one with the given name in the named sprite atlas
            </summary>
            <param name="image"></param>
            <param name="spriteReference"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.SetMainTexture(UnityEngine.Renderer,UnityEngine.Texture2D)">
            <summary>
            (Cross-Game compatible) Set the texture for this renderer. Equivalent to "render.material.mainTexture = texture2D"
            </summary>
            <param name="renderer"></param>
            <param name="texture2D"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.SetMainTexture(UnhollowerBaseLib.Il2CppReferenceArray{UnityEngine.Renderer},UnityEngine.Texture2D)">
            <summary>
            (Cross-Game compatible) Set the texture for all renderers in this collection. Equivalent to a "ForEach(render.material.mainTexture = texture2D)"
            </summary>
            <param name="renderers"></param>
            <param name="texture2D"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.UnbindMesh(UnityEngine.SkinnedMeshRenderer)">
            <summary>
            (Cross-Game compatible) Unbinds the renderer's sharedMesh, so that changes you make to it don't change the original
            </summary>
            <param name="skinnedMeshRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.BakedMesh(UnityEngine.SkinnedMeshRenderer)">
            <summary>
            (Cross-Game compatible) 
            </summary>
            <param name="skinnedMeshRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.GetVertices(UnityEngine.SkinnedMeshRenderer)">
            <summary>
            (Cross-Game compatible) 
            </summary>
            <param name="skinnedMeshRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.GetTriangles(UnityEngine.SkinnedMeshRenderer,System.Int32)">
            <summary>
            (Cross-Game compatible) Gets the list of triangles for a Mesh, even if its not marked as isReadable
            <br/>
            Each "triangle" is a set of 3 consecutive ints in the list, where the number is the index in the vertices
            </summary>
            <param name="skinnedMeshRenderer"></param>
            <param name="submesh"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.GetTrianglesAsArrays(UnityEngine.SkinnedMeshRenderer,System.Int32)">
            <summary>
            (Cross-Game compatible) 
            </summary>
            <param name="skinnedMeshRenderer"></param>
            <param name="submesh"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.RendererExt.GetBoneIndex(UnityEngine.SkinnedMeshRenderer,System.String)">
            <summary>
            (Cross-Game compatible) 
            </summary>
            <param name="skinnedMeshRenderer"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.GetRenderers``1(Assets.Scripts.Unity.Display.UnityDisplayNode,System.Boolean)">
            <summary>
            Gets all generic renderers of the specified type, recalculating the renderers if need be
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="recalculate">Whether to recalculate renderers</param>
            <typeparam name="T">The type of Renderer you're looking for</typeparam>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.GetRenderer``1(Assets.Scripts.Unity.Display.UnityDisplayNode,System.Boolean)">
            <summary>
            Gets the first generic renderer of the specified type, recalculating the renderers if need be
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="recalculate">Whether to recalculate renderers</param>
            <typeparam name="T">The type of Renderer you're looking for</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.GetMeshRenderers(Assets.Scripts.Unity.Display.UnityDisplayNode,System.Boolean)">
            <summary>
            Gets all renderers that are of type SkinnedMeshRenderer or MeshRenderer
            </summary>
            <param name="node"></param>
            <param name="recalculate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.GetMeshRenderer(Assets.Scripts.Unity.Display.UnityDisplayNode,System.Int32,System.Boolean)">
            <summary>
            Gets the first (or an indexed) SkinnedMeshRenderer/MeshRenderer
            </summary>
            <param name="node"></param>
            <param name="index"></param>
            <param name="recalculate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.SaveMeshTexture(Assets.Scripts.Unity.Display.UnityDisplayNode,System.Int32,System.String)">
            <summary>
            Saves the texture used for this node's mesh renderer 
            <br/>
            By default, this saves to local files, aka "C:\Users\...\AppData\LocalLow\Ninja Kiwi\BloonsTD6"
            </summary>
            <param name="node">The UnityDisplayNode</param>
            <param name="index"></param>
            <param name="path">Optional path to save to instead</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.PrintInfo(Assets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            Prints relevant info about this node to the console including:
            <br/>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.UnityDisplayNodeExt.Get3DModels(Assets.Scripts.Unity.Display.UnityDisplayNode)">
            <summary>
            (Cross-Game compatible) Get all 3D models attached to this UnityDisplayNode. 
            </summary>
            <param name="unityDisplayNode"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonsModExt.GetModName(BTD_Mod_Helper.BloonsMod)">
            <summary>
            (Cross-Game compatible) Get the name of this mod from it's dll name
            </summary>
            <param name="bloonsMod"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonsModExt.GetModDirectory(BTD_Mod_Helper.BloonsMod)">
            <summary>
            (Cross-Game compatible) Get the personal mod directory for this specific mod. Useful for keeping this mod's files seperate from other mods. Example: "BloonsTD6/Mods/BloonsTD6 Mod Helper/settings.txt"
            </summary>
            <param name="bloonsMod"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonsModExt.GetModDirectory(BTD_Mod_Helper.BloonsMod,System.Boolean)">
            <summary>
            (Cross-Game compatible) Get the personal mod directory for this specific mod. Useful for keeping this mod's files seperate from other mods. Example: "BloonsTD6/Mods/BloonsTD6 Mod Helper/settings.txt"
            </summary>
            <param name="bloonsMod"></param>
            <param name="createIfNotExists">Create the mod's directory if it doesn't exist yet?</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonsModExt.GetModSettingsDir(BTD_Mod_Helper.BloonsMod)">
            <summary>
            (Cross-Game compatible) Get's the directory where this mod's settings are or will be stored. Example: "BloonsTD6/Mods/BloonsTD6 Mod Helper/settings.txt"
            </summary>
            <param name="bloonsMod"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonsModExt.GetModSettingsDir(BTD_Mod_Helper.BloonsMod,System.Boolean)">
            <summary>
            (Cross-Game compatible) Get's the directory where this mod's settings are or will be stored. Example: "BloonsTD6/Mods/BloonsTD6 Mod Helper/settings.txt"
            </summary>
            <param name="bloonsMod"></param>
            <param name="createIfNotExists">Create the mod's directory if it doesn't exist yet?</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemDictionaryExt.GetValues``2(Il2CppSystem.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            (Cross-Game compatible) Get all of the values from this Dictionary as a list
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="keyValuePairs"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemDictionaryExt.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstruct method of normal KeyValuePairs. TODO why do some files need this?
            </summary>
            <param name="kvp"></param>
            <param name="k"></param>
            <param name="v"></param>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemDictionaryExt.Deconstruct``2(Il2CppSystem.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstruct method of IL2CPP KeyValuePairs
            </summary>
            <param name="kvp"></param>
            <param name="k"></param>
            <param name="v"></param>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.ForEach``1(``0[],System.Action{``0})">
            <summary>
            (Cross-Game compatible) Performs the specified action on each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="action">Action to preform on each element</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.FindAll``1(``0[],System.Predicate{``0})">
            <summary>
            (Cross-Game compatible) Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="match"> The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.Any``1(``0[])">
            <summary>
            (Cross-Game compatible) Return whether or not there are any elements in this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.Any``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return whether or not there are any elements in this that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.ToIl2CppList``1(``0[])">
            <summary>
            (Cross-Game compatible) Return as Il2CppSystem.List
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.ToIl2CppReferenceArray``1(``0[])">
            <summary>
            (Cross-Game compatible) Return as Il2CppReferenceArray
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.ToLockList``1(``0[])">
            <summary>
            (Cross-Game compatible) Return as LockList
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.Duplicate``1(``0[])">
            <summary>
            (Cross-Game compatible) Return a duplicate of this Array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.DuplicateAs``2(``0[])">
            <summary>
            (Cross-Game compatible) Return a duplicate of this array as type TCast
            </summary>
            <typeparam name="TSource">The original Array Type</typeparam>
            <typeparam name="TCast">The Cast type</typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.AddTo``1(``0[],``0)">
            <summary>
            (Cross-Game compatible) Return this with an Item added to it
            </summary>
            <typeparam name="T">The Type of the Item you want to add</typeparam>
            <param name="array"></param>
            <param name="objectToAdd">Item to add to this</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.AddTo``1(``0[],``0[])">
            <summary>
            (Cross-Game compatible) Return this with Items added to it
            </summary>
            <typeparam name="T">The Type of the Items you want to add</typeparam>
            <param name="array"></param>
            <param name="objectsToAdd">Items you want to add</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.AddTo``1(``0[],System.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return this with Items added to it
            </summary>
            <typeparam name="T">The Type of the Items you want to add</typeparam>
            <param name="array"></param>
            <param name="objectsToAdd">Items you want to add</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.HasItemsOfType``2(``0[])">
            <summary>
            (Cross-Game compatible) Check if this has any items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type you're checking for</typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.GetItemOfType``2(``0[])">
            <summary>
            (Cross-Game compatible) Return the first Item of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want</typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.GetItemsOfType``2(``0[])">
            <summary>
            (Cross-Game compatible) Return all Items of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items you want</typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.RemoveItemOfType``2(``0[])">
            <summary>
            (Cross-Game compatible) Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.RemoveItem``2(``0[],``1)">
            <summary>
            (Cross-Game compatible) Return this with the first Item of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Item you want to remove</typeparam>
            <param name="array"></param>
            <param name="itemToRemove">The specific Item to remove</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.RemoveItemsOfType``2(``0[])">
            <summary>
            (Cross-Game compatible) Return this with all Items of type TCast removed
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast">The Type of the Items that you want to remove</typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.Printed(System.Int32[])">
            <summary>
            A string with all array elements printed together with no spaces
            <br/>
            Useful for the suffix for Tower IDS like DartMonkey-230
            </summary>
            <param name="arr">The array</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.Order(System.Int32[])">
            <summary>
            Returns the index of the highest tier, then the middle, then the lowest
            <br/>
            Breaks ties by Middle Path >> Top Path >> Bottom Path
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ArrayExt.IsValid(System.Int32[])">
            <summary>
            Returns whether an int array is a valid set of tiers for a Tower
            </summary>
            <param name="tiers"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.DictionaryExt.GetValues``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            (Cross-Game compatible) Get all of the values from this Dictionary as a list
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="keyValuePairs"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.DirectoryInfoExt.GetAllMelonMods(System.IO.DirectoryInfo)">
            <summary>
            (Cross-Game compatible) Returns all Files in this directory that reference MelonLoader.dll or MelonLoader.ModHandler.dll
            </summary>
            <param name="directoryInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.FileInfoExt.GetAllReferences(System.IO.FileInfo)">
            <summary>
            (Cross-Game compatible) Get all Assembly References from this FileInfo. Returns null if there are none
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.FileInfoExt.IsMelonMod(System.IO.FileInfo)">
            <summary>
            (Cross-Game compatible) Returns whether or not this File has a reference to the newer MelonLoader.dll or the older MelonLoader.ModHandler.dll
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.FileInfoExt.IsNewerMelonMod(System.IO.FileInfo)">
            <summary>
            (Cross-Game compatible) Returns whether or not this File has a reference to the newer MelonLoader.dll (For MelonLoader 3.0 and up)
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.FileInfoExt.IsOlderMelonMod(System.IO.FileInfo)">
            <summary>
            (Cross-Game compatible) Returns whether or not this File has a reference to the older MelonLoader.ModHandler.dll (For MelonLoader 2.7.4 and below)
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TypeExt.GetMethods(System.Type,System.String)">
            <summary>
            (Cross-Game compatible) Get all methods with the specified method name
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SpriteReferenceExt.GetGUID(Assets.Scripts.Utils.SpriteReference)">
            <summary>
            (Cross-Game compatible) Returns's the GUID of this SpriteReference
            </summary>
            <param name="spriteReference"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt.HasBehavior``1(Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel)">
            <summary>
            (Cross-Game compatible) Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt.GetBehavior``1(Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel)">
            <summary>
            (Cross-Game compatible) Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt.GetBehaviors``1(Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel)">
            <summary>
            (Cross-Game compatible) Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt.AddBehavior``1(Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel,``0)">
            <summary>
            (Cross-Game compatible) Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt.RemoveBehavior``1(Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel)">
            <summary>
            (Cross-Game compatible) Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt.RemoveBehavior``1(Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel,``0)">
            <summary>
            (Cross-Game compatible) Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelBehaviorExt.RemoveBehaviors``1(Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel)">
            <summary>
            (Cross-Game compatible) Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt.HasBehavior``1(Assets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            (Cross-Game compatible) Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt.GetBehavior``1(Assets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            (Cross-Game compatible) Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt.GetBehaviors``1(Assets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            (Cross-Game compatible) Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt.AddBehavior``1(Assets.Scripts.Models.Bloons.BloonModel,``0)">
            <summary>
            (Cross-Game compatible) Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt.RemoveBehavior``1(Assets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            (Cross-Game compatible) Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt.RemoveBehavior``1(Assets.Scripts.Models.Bloons.BloonModel,``0)">
            <summary>
            (Cross-Game compatible) Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelBehaviorExt.RemoveBehaviors``1(Assets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            (Cross-Game compatible) Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityBehaviorExt.HasBehavior``1(Assets.Scripts.Simulation.Objects.Entity)">
            <summary>
            (Cross-Game compatible) Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityBehaviorExt.GetBehavior``1(Assets.Scripts.Simulation.Objects.Entity)">
            <summary>
            (Cross-Game compatible) Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityBehaviorExt.GetBehaviors``1(Assets.Scripts.Simulation.Objects.Entity)">
            <summary>
            (Cross-Game compatible) Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityBehaviorExt.AddBehavior``1(Assets.Scripts.Simulation.Objects.Entity,``0)">
            <summary>
            (Cross-Game compatible) Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="entity"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityBehaviorExt.RemoveBehavior``1(Assets.Scripts.Simulation.Objects.Entity)">
            <summary>
            (Cross-Game compatible) Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityBehaviorExt.RemoveBehavior``1(Assets.Scripts.Simulation.Objects.Entity,``0)">
            <summary>
            (Cross-Game compatible) Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="entity"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.EntityBehaviorExt.RemoveBehaviors``1(Assets.Scripts.Simulation.Objects.Entity)">
            <summary>
            (Cross-Game compatible) Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.HasBehavior``1(Assets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            (Cross-Game compatible) Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.GetBehavior``1(Assets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            (Cross-Game compatible) Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.GetBehaviors``1(Assets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            (Cross-Game compatible) Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.AddBehavior``1(Assets.Scripts.Models.Towers.Projectiles.ProjectileModel,``0)">
            <summary>
            (Cross-Game compatible) Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.RemoveBehavior``1(Assets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            (Cross-Game compatible) Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.RemoveBehavior``1(Assets.Scripts.Models.Towers.Projectiles.ProjectileModel,``0)">
            <summary>
            (Cross-Game compatible) Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ProjectileModelBehaviorExt.RemoveBehaviors``1(Assets.Scripts.Models.Towers.Projectiles.ProjectileModel)">
            <summary>
            (Cross-Game compatible) Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.HasBehavior``1(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.GetBehavior``1(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.GetBehaviors``1(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.AddBehavior``1(Assets.Scripts.Models.Towers.TowerModel,``0)">
            <summary>
            (Cross-Game compatible) Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.RemoveBehavior``1(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.RemoveBehavior``1(Assets.Scripts.Models.Towers.TowerModel,``0)">
            <summary>
            (Cross-Game compatible) Removes a specific behavior from a tower
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerModelBehaviorExt.RemoveBehaviors``1(Assets.Scripts.Models.Towers.TowerModel)">
            <summary>
            (Cross-Game compatible) Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt.HasBehavior``1(Assets.Scripts.Models.Towers.Weapons.WeaponModel)">
            <summary>
            (Cross-Game compatible) Check if this has a specific Behavior
            </summary>
            <typeparam name="T">The Behavior you're checking for</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt.GetBehavior``1(Assets.Scripts.Models.Towers.Weapons.WeaponModel)">
            <summary>
            (Cross-Game compatible) Return the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt.GetBehaviors``1(Assets.Scripts.Models.Towers.Weapons.WeaponModel)">
            <summary>
            (Cross-Game compatible) Return all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want</typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt.AddBehavior``1(Assets.Scripts.Models.Towers.Weapons.WeaponModel,``0)">
            <summary>
            (Cross-Game compatible) Add a Behavior to this
            </summary>
            <typeparam name="T">The Behavior you want to add</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt.RemoveBehavior``1(Assets.Scripts.Models.Towers.Weapons.WeaponModel)">
            <summary>
            (Cross-Game compatible) Remove the first Behavior of Type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt.RemoveBehavior``1(Assets.Scripts.Models.Towers.Weapons.WeaponModel,``0)">
            <summary>
            (Cross-Game compatible) Remove the first Behavior of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.WeaponModelBehaviorExt.RemoveBehaviors``1(Assets.Scripts.Models.Towers.Weapons.WeaponModel)">
            <summary>
            (Cross-Game compatible) Remove all Behaviors of type T
            </summary>
            <typeparam name="T">The Behavior you want to remove</typeparam>
            <param name="model"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt.GetEnumeratorCollections``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Get the IEnumerator as type Il2CppSystem.Collections.IEnumerator. Needed for IEnumerator.MoveNext(). Not the same as IEnumerable.GetEnumerator()
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt.Count``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Get the total number of elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt.GetItem``1(Il2CppSystem.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            (Cross-Game compatible) Return the Item at a specific index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt.ToIl2CppList``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Return as Il2CppSystem.List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt.ToList``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Return as System.List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt.ToIl2CppReferenceArray``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Return as Il2CppReferenceArray
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerableExt.ToLockList``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Return as LockList
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.ForEach``1(Il2CppSystem.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            (Cross-Game compatible) Performs the specified action on each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action">Action to preform on each element</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.Any``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Return whether or not there are any elements in this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.Any``1(Il2CppSystem.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return whether or not there are any elements in this that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.Last``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Return the last item in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.LastOrDefault``1(Il2CppSystem.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the last item in the collection that meets the condition, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.First``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Return the first element in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.FirstOrDefault``1(Il2CppSystem.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Return the first element in the collection, or return default if it's null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenericIEnumerable.FirstOrDefault``1(Il2CppSystem.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the first element that matches the predicate, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.IEnumerableExt.ToIl2CppList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Return as Il2CppSystem.List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.IEnumerableExt.ToIl2CppReferenceArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Return as Il2CppReferenceArray
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.IEnumerableExt.ToLockList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Return as LockList
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.IEnumerableExt.Duplicate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Return as a duplicate IEnumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.IEnumerableExt.DuplicateAs``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            (Cross-Game compatible) Return as a duplicate IEnumerable of type TCast
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCast"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumeratorExt.Count(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            (Cross-Game compatible) Get the total number of elements
            </summary>
            <param name="enumerator"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumeratorExt.GetItem(Il2CppSystem.Collections.IEnumerator,System.Int32)">
            <summary>
            (Cross-Game compatible) Return the Item at a specific index
            </summary>
            <param name="enumerator"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumeratorExt.ToList(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            (Cross-Game compatible) Return as System.List
            </summary>
            <param name="enumerator"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumeratorExt.ToIl2CppList(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            (Cross-Game compatible) Return as Il2CppSystem.List
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumeratorExt.ToIl2CppReferenceArray(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            (Cross-Game compatible) Return as Il2CppReferenceArray
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumeratorExt.ToLockList(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            (Cross-Game compatible) Return as LockList
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt.ReferenceEquals(Il2CppSystem.Object,Il2CppSystem.Object)">
            <summary>
            (Cross-Game compatible) Is this Reference equal to another Object's Reference?
            </summary>
            <param name="instance"></param>
            <param name="to">Object to compare to</param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt.IsType``1(Il2CppSystem.Object)">
            <summary>
            (Cross-Game compatible) Check if object is the same type as T
            </summary>
            <typeparam name="T">Type to check</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppSystemObjectExt.IsType``1(Il2CppSystem.Object,``0@)">
            <summary>
            (Cross-Game compatible) Check if object is the same type as T
            </summary>
            <param name="instance"></param>
            <param name="castObject">The casted object if this is of type T</param>
            <typeparam name="T">Type to check</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.ForEach``1(Il2CppSystem.Collections.IEnumerator,System.Action{``0})">
            <summary>
            (Cross-Game compatible) Performs the specified action on each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action">Action to preform on each element</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.First``1(Il2CppSystem.Collections.IEnumerator,System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the first element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.FirstOrDefault``1(Il2CppSystem.Collections.IEnumerator,System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the first element that matches the predicate, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.Where``1(Il2CppSystem.Collections.IEnumerator,System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return all elements that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.FindIndex``1(Il2CppSystem.Collections.IEnumerator,System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the index of the element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.Any``1(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            (Cross-Game compatible) Return whether or not there are any elements in this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.Any``1(Il2CppSystem.Collections.IEnumerator,System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return whether or not there are any elements in this that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.Last``1(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            (Cross-Game compatible) Return the last item in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.LastOrDefault``1(Il2CppSystem.Collections.IEnumerator,System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the last item in the collection that meets the condition, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.First``1(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            (Cross-Game compatible) Return the first element in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppIEnumerator.FirstOrDefault``1(Il2CppSystem.Collections.IEnumerator)">
            <summary>
            (Cross-Game compatible) Return the first element in the collection, or return default if it's null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.First``1(Il2CppSystem.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the first element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.FirstOrDefault``1(Il2CppSystem.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the first element that matches the predicate, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.Where``1(Il2CppSystem.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return all elements that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.FindIndex``1(Il2CppSystem.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the index of the element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.Any``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return whether or not there are any elements in this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.Any``1(Il2CppSystem.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return whether or not there are any elements in this that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.Last``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return the last item in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.LastOrDefault``1(Il2CppSystem.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the last item in the collection that meets the condition, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.First``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return the first element in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppGenerics.FirstOrDefault``1(Il2CppSystem.Collections.Generic.List{``0})">
            <summary>
            (Cross-Game compatible) Return the first element in the collection, or return default if it's null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArray.ForEach``1(UnhollowerBaseLib.Il2CppReferenceArray{``0},System.Action{``0})">
            <summary>
            (Cross-Game compatible) Performs the specified action on each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action">Action to preform on each element</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArray.FindIndex``1(UnhollowerBaseLib.Il2CppReferenceArray{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the index of the element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArray.Any``1(UnhollowerBaseLib.Il2CppReferenceArray{``0})">
            <summary>
            (Cross-Game compatible) Return whether or not there are any elements in this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Il2CppReferenceArray.Any``1(UnhollowerBaseLib.Il2CppReferenceArray{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return whether or not there are any elements in this that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.ForEach``1(Assets.Scripts.Utils.LockList{``0},System.Action{``0})">
            <summary>
            (Cross-Game compatible) Performs the specified action on each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action">Action to preform on each element</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.First``1(Assets.Scripts.Utils.LockList{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the first element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.FirstOrDefault``1(Assets.Scripts.Utils.LockList{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the first element that matches the predicate, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.Where``1(Assets.Scripts.Utils.LockList{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return all elements that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.FindIndex``1(Assets.Scripts.Utils.LockList{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the index of the element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.Any``1(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Return whether or not there are any elements in this
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.Any``1(Assets.Scripts.Utils.LockList{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return whether or not there are any elements in this that match the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.Last``1(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Return the last item in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.LastOrDefault``1(Assets.Scripts.Utils.LockList{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Cross-Game compatible) Return the last item in the collection that meets the condition, or return default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.First``1(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Return the first element in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.LockedList.FirstOrDefault``1(Assets.Scripts.Utils.LockList{``0})">
            <summary>
            (Cross-Game compatible) Return the first element in the collection, or return default if it's null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AbilityModelExt.GetAbilitySims(Assets.Scripts.Models.Towers.Behaviors.Abilities.AbilityModel)">
            <summary>
            (Cross-Game compatible) Get the all AbilityToSimulation with this AbilityModel
            </summary>
            <param name="abiltyModel"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.AttackModelExt">
            <summary>
            Extensions for AttackModels
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelExt.AddWeapon(Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel,Assets.Scripts.Models.Towers.Weapons.WeaponModel)">
            <summary>
            (Cross-Game compatible) Add a weapon to this Attack Model
            </summary>
            <param name="attackModel"></param>
            <param name="weaponToAdd">Weapon to add</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelExt.RemoveWeapon(Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel,Assets.Scripts.Models.Towers.Weapons.WeaponModel)">
            <summary>
            (Cross-Game compatible) Remove a weapon from this Attack Model
            </summary>
            <param name="attackModel"></param>
            <param name="weaponToRemove"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelExt.GetAllProjectiles(Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel)">
            <summary>
            (Cross-Game compatible) Recursively get all ProjectileModels for this attack model and all of it's weapons
            </summary>
            <param name="attackModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.AttackModelExt.ApplyDisplay``1(Assets.Scripts.Models.Towers.Behaviors.Attack.AttackModel,System.Int32)">
            <summary>
            Applies the given ModDisplay to the index'th (or first) DisplayModel in the behaviors of the AttackModel.
            <br/>
            If there are no DisplayModels, then this does nothing
            </summary>
            <param name="attackModel"></param>
            <param name="index"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.GetTotalCash(Assets.Scripts.Models.Bloons.BloonModel,System.Int32)">
            <summary>
            (Cross-Game compatable) Return how much cash this bloon would give if popped by <paramref name="layersPopped"/> number of layers
            </summary>
            <param name="layersPopped">How many layers of bloons to pop, ignoring layer health. If less than 0, calculates for the entire bloon</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.GetIndex(Assets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            (Cross-Game compatible) Return the number position of this bloon from the list of all bloons (Game.instance.model.bloons)
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.SpawnBloonModel(Assets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            (Cross-Game compatible) Spawn this BloonModel on the map right now
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.CreateBloonEmissionModel(Assets.Scripts.Models.Bloons.BloonModel,System.Int32,System.Int32)">
            <summary>
            (Cross-Game compatible) Create a BloonEmissionModel from this BloonModel
            </summary>
            <param name="count">Number of bloons in this emission model</param>
            <param name="spacing">Space between each bloon in this emission model</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.GetBloonSims(Assets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            This is Obsolete, use GetAllBloonToSim instead. (Cross-Game compatible) Return all BloonToSimulations with this BloonModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.GetAllBloonToSim(Assets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            (Cross-Game compatible) Return all BloonToSimulations with this BloonModel
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.BloonModelExt.GetBaseID(Assets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            (Cross-Game compatible) Return the Base ID of this BloonModel
            </summary>
            <param name="bloonModel"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ModelExt.Duplicate``1(``0)">
            <summary>
            (Cross-Game compatible) Create a new and seperate copy of this object. Same as using:  .Clone().Cast();
            </summary>
            <typeparam name="T">Type of object you want to cast to when duplicating. Done automatically</typeparam>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SpawnerExt.Emit(Assets.Scripts.Simulation.Track.Spawner,Assets.Scripts.Models.Bloons.BloonModel)">
            <summary>
            (Cross-Game compatible) Spawn a BloonModel on the map
            </summary>
            <param name="spawner"></param>
            <param name="bloonModel"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerToSimulationExt.GetSimTower(Assets.Scripts.Unity.Bridge.TowerToSimulation)">
            <summary>
            This is Obsolete, use GetTower instead. (Cross-Game compatible) Return the Tower associated with this TowerToSimulation. 
            </summary>
            <param name="towerToSim"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.TowerToSimulationExt.GetTower(Assets.Scripts.Unity.Bridge.TowerToSimulation)">
            <summary>
            (Cross-Game compatible) Return the Tower associated with this TowerToSimulation
            </summary>
            <param name="towerToSim"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Extensions.ActionExt">
            <summary>
            Extension methods for System.Action
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.ToIl2CppSystemAction(System.Action)">
            <summary>
            (Cross-Game compatible) Return this as a System.Action
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll(System.Collections.Generic.List{System.Action})">
            <summary>
            Invoke all actions in the list
            </summary>
            <param name="actions">list of actions to invoke</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll``1(System.Collections.Generic.List{System.Action{``0}},``0)">
            <summary>
            Invoke all actions in the list
            </summary>
            <typeparam name="T">argument type</typeparam>
            <param name="actions">list of actions to invoke</param>
            <param name="argument">argument to pass in while invoking</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll(System.Collections.Generic.List{Il2CppSystem.Action})">
            <summary>
            Invoke all actions in the list
            </summary>
            <param name="actions">list of actions to invoke</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll``1(System.Collections.Generic.List{Il2CppSystem.Action{``0}},``0)">
            <summary>
            Invoke all actions in the list
            </summary>
            <typeparam name="T">argument type</typeparam>
            <param name="actions">list of actions to invoke</param>
            <param name="argument">argument to pass in while invoking</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll(Il2CppSystem.Collections.Generic.List{Il2CppSystem.Action})">
            <summary>
            Invoke all actions in the list
            </summary>
            <param name="actions">list of actions to invoke</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll``1(Il2CppSystem.Collections.Generic.List{Il2CppSystem.Action{``0}},``0)">
            <summary>
            Invoke all actions in the list
            </summary>
            <typeparam name="T">argument type</typeparam>
            <param name="actions">list of actions to invoke</param>
            <param name="argument">argument to pass in while invoking</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll(Il2CppSystem.Collections.Generic.List{System.Action})">
            <summary>
            Invoke all actions in the list
            </summary>
            <param name="actions">list of actions to invoke</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ActionExt.InvokeAll``1(Il2CppSystem.Collections.Generic.List{System.Action{``0}},``0)">
            <summary>
            Invoke all actions in the list
            </summary>
            <typeparam name="T">argument type</typeparam>
            <param name="actions">list of actions to invoke</param>
            <param name="argument">argument to pass in while invoking</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ButtonExt.SetSprite(UnityEngine.UI.Button,UnityEngine.Sprite,System.String)">
            <summary>
            Set the sprite for this button.
            </summary>
            <param name="button"></param>
            <param name="sprite">Sprite to change to</param>
            <param name="newSpriteName">Optionally provide a new name for the sprite</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ComponentExt.GetComponentFromChildrenByName``1(UnityEngine.Component,System.String)">
            <summary>
            (Cross-Game compatible) Try to get a component in a child of this Component by it's name. Equivelant to a foreach with GetComponentsInChildren
            </summary>
            <typeparam name="T"></typeparam>
            <param name="component"></param>
            <param name="componentName"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ComponentExt.Show(UnityEngine.Component)">
            <summary>
            (Cross-Game compatible) Makes the Component visible by setting the scale to the default value of 1
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.ComponentExt.Hide(UnityEngine.Component)">
            <summary>
            (Cross-Game compatible) Makes the Component hidden (not visible) by setting the scale to zero
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.GetComponentInChildrenByName``1(UnityEngine.GameObject,System.String)">
            <summary>
            (Cross-Game compatible) Try to get a component in a child of this GameObject by it's name. Equivelant to a foreach with GetComponentsInChildren
            </summary>
            <typeparam name="T"></typeparam>
            <param name="gameObject"></param>
            <param name="componentName"></param>
            <returns></returns>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.Show(UnityEngine.GameObject)">
            <summary>
            (Cross-Game compatible) Makes the Game Object visible by setting the scale to the default value of 1
            </summary>
            <param name="gameObject"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.GameObjectExt.Hide(UnityEngine.GameObject)">
            <summary>
            (Cross-Game compatible) Makes the Game Object hidden (not visible) by setting the scale to zero
            </summary>
            <param name="gameObject"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.SpriteExt.SetTexture(UnityEngine.Sprite,UnityEngine.Texture2D)">
            <summary>
            (Cross-Game compatible) Set this Sprite's texture
            </summary>
            <param name="sprite"></param>
            <param name="newTexture"></param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Texture2DExt.CreateFromColor(UnityEngine.Texture2D,UnityEngine.Color)">
            <summary>
            (Cross-Game compatible) Create Texture2D from a unity Color. Texture will only be this color
            </summary>
            <param name="color">Color to make new texture</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Texture2DExt.SaveToPNG(UnityEngine.Texture2D,System.String)">
            <summary>
            (Cross-Game compatible) Save Texture2D as a png to file.
            </summary>
            <param name="texture"></param>
            <param name="filePath">File path to save texture to</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Texture2DExt.LoadFromFile(UnityEngine.Texture2D,System.String)">
            <summary>
            (Cross-Game compatible) Create Texture2D from a file on local PC
            </summary>
            <param name="filePath">path of file on PC</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Texture2DExt.CreateSpriteFromTexture(UnityEngine.Texture2D,System.Single)">
            <summary>
            (Cross-Game compatible) Create a Sprite from this Texture2D
            </summary>
            <param name="pixelsPerUnit">Number of pixels you want in each unit. More pixels means bigger sprite in game</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Texture2DExt.CreateSpriteFromTexture(UnityEngine.Texture2D,System.Single,UnityEngine.Vector2)">
            <summary>
            (Cross-Game compatible) Create a Sprite from this Texture2D
            </summary>
            <param name="pixelsPerUnit">Number of pixels you want in each unit. More pixels means bigger sprite in game</param>
        </member>
        <member name="M:BTD_Mod_Helper.Extensions.Vector3Ext.ToSMathVector(UnityEngine.Vector3)">
            <summary>
            (Cross-Game compatible) Convert UnityEngine.Vector3 to NinjaKiwi's SMath.Vector3
            </summary>
            <param name="vector3"></param>
            <returns></returns>
        </member>
        <member name="T:BTD_Mod_Helper.Patches.ModdedClientChecking.ModdedClientBypassing">
            <summary>
            You forced our hand :(
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.Patches.ModdedClientChecking.ModdedClientBypassing.DefaultBypassCheck">
            <summary>
            The nuclear option would be just setting this to true, which would entirely bypass all of NK's clientside checks
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Patches.ModdedClientChecking.ModdedClientBypassing.CurrentlyBypassingCheck">
            <summary>
            Whether the ModdedClient check is currently being bypassed
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Patches.ModdedClientChecking.ModdedClientBypassing.StartBypassingCheck">
            <summary>
            Called in prefix patches on methods where we think modded clients should be accepted
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.Patches.ModdedClientChecking.ModdedClientBypassing.StopBypassingCheck">
            <summary>
            Called in postfix patches on methods where we think modded clients should be accepted
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Patches.UI.TowerSelectionMenu_UpgradeTower">
            <summary>
            This is a benign patch that helps fix unexpected issues with changing upgrade restrictions
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Properties.Resources.ingame_popup">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.Properties.Resources.modoptions">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.SessionData">
            <summary>
            This class is used in the API to store data about the current state of the game,
            like whether or not the player is in a Public Coop game
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.LeakedBloons">
            <summary>
            Contains all the Bloons that were leaked during this round
            Used to track which bloons were popped and which leaked
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.DestroyedBloons">
            <summary>
            Contains all the Bloons that were destroyed during this round
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.IsInPublicCoop">
            <summary>
            If the player is in Coop, this value represents whether it's a 
            Public Coop match or not
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.IsInOdyssey">
            <summary>
            If the player is in a game, are they in a Odyssey game
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.IsInRace">
            <summary>
            If the player is in a game, is it a Race game
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.SaveDirectory">
            <summary>
            The directory of the save file. 
            Gets set when <see cref="M:NinjaKiwi.Players.Files.FileSaveStrategy.Choose(System.String,NinjaKiwi.Players.SaveStrategy)"/>
            tries to load the Player Save
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.PlayerSaveStrategy">
            <summary>
            The instance of <see cref="T:NinjaKiwi.Players.Files.FileSaveStrategy"/> that is used to load the Player save.
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.SessionData.NkGI">
            <summary>
            The instance of <see cref="T:NinjaKiwi.NKMulti.NKMultiGameInterface"/> that is used during a 
            multiplayer game
            </summary>
        </member>
        <member name="F:BTD_Mod_Helper.SessionData.bloonPopValues">
            <summary>
            How much cash each bloon is worth when completely popped
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.SessionData.Reset">
            <summary>
            Resets all the values in SessionData
            </summary>
        </member>
        <member name="T:BTD_Mod_Helper.BloonsMod">
            <summary>
            
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.Content">
            <summary>
            All ModContent in ths mod
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.IDPrefix">
            <summary>
            The prefix used for the IDs of towers, upgrades, etc for this mod to prevent conflicts with other mods
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.CheatMod">
            <summary>
            Setting this to true will prevent your BloonsMod hooks from executing if the player could get flagged for using mods at that time.
            
            For example, using mods in public co-op
            </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.GithubReleaseURL">
             <summary>
             Github API URL used to check if this mod is up to date.
            
                 For example: "https://api.github.com/repos/gurrenm3/BTD-Mod-Helper/releases"
             </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.MelonInfoCsURL">
             <summary>
             As an alternative to a GithubReleaseURL, a direct link to a web-hosted version of the .cs file that
             has the "MelonInfo" attribute with the version of your mod
            
                 
                 For example: "https://raw.githubusercontent.com/doombubbles/BTD6-Mods/main/MegaKnowledge/Main.cs"
            
                 because the file contains
                 [assembly: MelonInfo(typeof(MegaKnowledge.Main), "Mega Knowledge", "1.0.1", "doombubbles")]
             </summary>
        </member>
        <member name="P:BTD_Mod_Helper.BloonsMod.LatestURL">
             <summary>
             Link that people should be prompted to go to when this mod is out of date.
            
                 For example: "https://github.com/gurrenm3/BTD-Mod-Helper/releases/latest"
             </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.Call(System.String,System.Object[])">
            <summary>
            Allows you to define ways for other mods to interact with this mod. Other mods could do:
            <code>
            ModContent.GetMod("YourModName")?.Call("YourOperationName", ...);
            </code>
            to execute functionality here.
            <br/>
            </summary>
            <param name="operation">A string for the name of the operation that another mods wants to call</param>
            <param name="parameters">The parameters that another mod has provided</param>
            <returns>A possible result of this call</returns>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.OnModOptionsOpened">
            <summary>
            Called whenever the Mod Options Menu gets opened, after it finishes initializing
            </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.OnKeyDown(UnityEngine.KeyCode)">
             <summary>
             Called on the frame that a key starts being held
            
             Equivalent to a HarmonyPostFix on Input.GetKeyDown
             </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.OnKeyUp(UnityEngine.KeyCode)">
             <summary>
             Called on the frame that a key stops being held
            
             Equivalent to a HarmonyPostFix on Input.GetKeyUp
             </summary>
        </member>
        <member name="M:BTD_Mod_Helper.BloonsMod.OnKeyHeld(UnityEngine.KeyCode)">
             <summary>
             Called every frame that a key is being held 
            
             Equivalent to a HarmonyPostFix on Input.GetKey
             </summary>
        </member>
    </members>
</doc>
